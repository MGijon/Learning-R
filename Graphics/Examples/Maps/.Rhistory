)
nodes=data.frame(
name=LETTERS[1:10],
carac=c( rep("young",3),rep("adult",2), rep("old",5))
)
network=graph_from_data_frame(d=links, vertices=nodes, directed=F)
par(bg="grey32", mar=c(0,0,0,0))
plot(network)
library(RColorBrewer)
coul = brewer.pal(3, "Set1")
my_color=coul[as.numeric(as.factor(V(network)$carac))]
plot(network, vertex.color=my_color)
E(network)$importance
plot(network, vertex.color=my_color, edge.width=E(network)$importance*2 )
legend("bottomleft", legend=levels(as.factor(V(network)$carac))  , col = coul , bty = "n", pch=20 , pt.cex = 3, cex = 1.5, text.col=coul , horiz = FALSE, inset = c(0.1, 0.1))
# library
library(igraph)
# Create data
data=matrix(sample(0:1, 400, replace=TRUE, prob=c(0.8,0.2)), nrow=20)
network=graph_from_adjacency_matrix(data , mode='undirected', diag=F )
# When ploting, we can use different layouts:
par(mfrow=c(2,2), mar=c(1,1,1,1))
plot(network, layout=layout.sphere, main="sphere")
plot(network, layout=layout.circle, main="circle")
plot(network, layout=layout.random, main="random")
plot(network, layout=layout.fruchterman.reingold, main="fruchterman.reingold")
library(igraph)
head(mtcars)
mat = cor(t(mtcars[,c(1,3:6)]))
mat[mat < 0.995] = 0
network = graph_from_adjacency_matrix( mat, weighted = T, mode = "undirected", diag = F)
plot(network)
library(RColorBrewer)
coul = brewer.pal(nlevels(as.factor(mtcars$cyl)), "Set2")
my_color = coul[as.numeric(as.factor(mtcars$cyl))]
par(bg = "grey13", mar = c(0,0,0,0))
set.seed(4)
plot(network,
vertex.size = 12,
vertex.color = my_color,
vertex.label.cex = 0.7,
vertex.label.color = "white",
vertex.frame.color = "transparent"
)
text(0,0,"The network chart of the mtcars dataset",col = "white")
text(0.2,-0.1," - by the R graph gallery",col = "white")
legend(x = -0.6, y = -0.12,
legend = paste( levels(as.factor(mtcars$cyl)), " cylinders", sep = ""),
col = coul , bty = "n", pch = 20 , pt.cex = 2, cex = 1, text.col = "white" , horiz = T)
library
library(igraph)
# create data:
links = data.frame(
source = c("A","A", "A", "A", "A","J", "B", "B", "C", "C", "D","I"),
target = c("B","B", "C", "D", "J","A","E", "F", "G", "H", "I","I")
)
# Turn it into igraph object
network=graph_from_data_frame(d = links, directed = F)
# Count the number of degree for each node:
deg=degree(network, mode = "all")
# Plot
plot(network, vertex.size = deg * 6, vertex.color = rgb(0.1,0.7,0.8,0.5) )
# source : https://www.r-graph-gallery.com/251-network-with-node-size-based-on-edges-number/
graphics.off()
# library
library(igraph)
# create data:
links = data.frame(
source = c("A","A", "A", "A", "A","J", "B", "B", "C", "C", "D","I"),
target = c("B","B", "C", "D", "J","A","E", "F", "G", "H", "I","I")
)
# Turn it into igraph object
network=graph_from_data_frame(d = links, directed = F)
# Count the number of degree for each node:
deg=degree(network, mode = "all")
# Plot
plot(network, vertex.size = deg * 6, vertex.color = rgb(0.1,0.7,0.8,0.5) )
# source : https://www.r-graph-gallery.com/251-network-with-node-size-based-on-edges-number/
# library
library(igraph)
# data
head(mtcars)
# Make a correlation matrix:
mat = cor(t(mtcars[,c(1,3:6)]))
# Keep only high correlations
mat[mat < 0.995] = 0
# Make an Igraph object from this matrix:
network = graph_from_adjacency_matrix( mat, weighted = T, mode = "undirected", diag = F)
plot(network)
# color palette
library(RColorBrewer)
coul = brewer.pal(nlevels(as.factor(mtcars$cyl)), "Set2")
# Map the color to cylinders
my_color = coul[as.numeric(as.factor(mtcars$cyl))]
# plot
par(bg = "grey13", mar = c(0,0,0,0))
set.seed(4)
plot(network,
vertex.size = 12,
vertex.color = my_color,
vertex.label.cex = 0.7,
vertex.label.color = "white",
vertex.frame.color = "transparent"
)
# title and legend
text(0,0,"The network chart of the mtcars dataset",col = "white")
text(0.2,-0.1," - by the R graph gallery",col = "white")
legend(x = -0.6, y = -0.12,
legend = paste( levels(as.factor(mtcars$cyl)), " cylinders", sep = ""),
col = coul , bty = "n", pch = 20 , pt.cex = 2, cex = 1, text.col = "white" , horiz = T)
# source : https://www.r-graph-gallery.com/250-correlation-network-with-igraph/
graphics.off()
# library
library(igraph)
# Create data
data = matrix(sample(0:1, 400, replace = TRUE, prob = c(0.8,0.2)), nrow = 20)
network = graph_from_adjacency_matrix(data , mode = 'undirected', diag = F )
# When ploting, we can use different layouts:
par(mfrow = c(2,2), mar = c(1,1,1,1))
plot(network, layout = layout.sphere, main = "sphere")
plot(network, layout = layout.circle, main = "circle")
plot(network, layout = layout.random, main = "random")
plot(network, layout = layout.fruchterman.reingold, main = "fruchterman.reingold")
# See the complete list with
help(layout)
# source : https://www.r-graph-gallery.com/247-network-chart-layouts/
graphics.off()
library(igraph)
# Create data
set.seed(1)
data=matrix(sample(0:1, 100, replace = TRUE, prob = c(0.8,0.2)), nc = 10)
network=graph_from_adjacency_matrix(data , mode = 'undirected', diag = F )
# Default network
par(mar = c(0,0,0,0))
plot(network)
# source : https://www.r-graph-gallery.com/248-igraph-plotting-parameters/
graphics.off()
# library
library(igraph)
# create data:
links = data.frame(
source = c("A","A", "A", "A", "A","J", "B", "B", "C", "C", "D","I"),
target = c("B","B", "C", "D", "J","A","E", "F", "G", "H", "I","I"),
importance = (sample(1:4, 12, replace = T))
)
nodes = data.frame(
name = LETTERS[1:10],
carac = c( rep("young",3), rep("adult",2), rep("old",5))
)
# Turn it into igraph object
network = graph_from_data_frame(d = links, vertices = nodes, directed = F)
# You can now plot it!
par(bg = "grey32", mar = c(0,0,0,0))
plot(network)
#########################################
graphics.off()
set.seed(1)
data = matrix(sample(0:1, 100, replace = TRUE, prob = c(0.8,0.2)), nc = 10)
network = graph_from_adjacency_matrix(data , mode = 'undirected', diag = F )
plot(network,
vertex.color = rgb(0.8,0.2,0.2,0.9),           # Node color
vertex.frame.color = "Forestgreen",            # Node border color
vertex.shape = c("circle","square"),             # One of “none”, “circle”, “square”, “csquare”, “rectangle” “crectangle”, “vrectangle”, “pie”, “raster”, or “sphere”
vertex.size = c(15:24),                          # Size of the node (default is 15)
vertex.size2 = NA,                               # The second size of the node (e.g. for a rectangle)
)
graphics.off()
plot(network,
vertex.label = LETTERS[1:10],                    # Character vector used to label the nodes
vertex.label.color = c("red","blue"),
vertex.label.family = "Times",                   # Font family of the label (e.g.“Times”, “Helvetica”)
vertex.label.font = c(1,2,3,4),                  # Font: 1 plain, 2 bold, 3, italic, 4 bold italic, 5 symbol
vertex.label.cex = c(0.5,1,1.5),                 # Font size (multiplication factor, device-dependent)
vertex.label.dist = 0,                           # Distance between the label and the vertex
vertex.label.degree = 0 ,                        # The position of the label in relation to the vertex (use pi)
)
graphics.off()
plot(network,
edge.color = rep(c("red","pink"), 5),           # Edge color
edge.width = seq(1, 10),                        # Edge width, defaults to 1
edge.arrow.size = 1,                           # Arrow size, defaults to 1
edge.arrow.width = 1,                          # Arrow width, defaults to 1
#edge.lty=c(1,2),                            # Line type, could be 0 or “blank”, 1 or “solid”, 2 or “dashed”, 3 or “dotted”, 4 or “dotdash”, 5 or “longdash”, 6 or “twodash”
edge.curved = c(rep(0, 5), rep(1, 5))            # Edge curvature, range 0-1 (FALSE sets it to 0, TRUE to 0.5)
)
plot(network,
vertex.label = LETTERS[1:10],                    # Character vector used to label the nodes
vertex.label.color = c("red", "blue"),
vertex.label.family = "Times",                   # Font family of the label (e.g.“Times”, “Helvetica”)
vertex.label.font = c(1, 2, 3, 4),                  # Font: 1 plain, 2 bold, 3, italic, 4 bold italic, 5 symbol
vertex.label.cex = c(0.5, 1, 1.5),                 # Font size (multiplication factor, device-dependent)
vertex.label.dist = 0,                           # Distance between the label and the vertex
vertex.label.degree = 0 ,                        # The position of the label in relation to the vertex (use pi)
)
plot(network,
edge.color = rep(c("red","pink"), 5),           # Edge color
edge.width = seq(1, 10),                        # Edge width, defaults to 1
edge.arrow.size = 1,                           # Arrow size, defaults to 1
edge.arrow.width = 1,                          # Arrow width, defaults to 1
#edge.lty=c(1,2),                            # Line type, could be 0 or “blank”, 1 or “solid”, 2 or “dashed”, 3 or “dotted”, 4 or “dotdash”, 5 or “longdash”, 6 or “twodash”
edge.curved = c(rep(0, 5), rep(1, 5))            # Edge curvature, range 0-1 (FALSE sets it to 0, TRUE to 0.5)
)
set.seed(1)
data = matrix(sample(0:1, 100, replace = TRUE, prob = c(0.8,0.2)), nc = 10)
network = graph_from_adjacency_matrix(data , mode = 'undirected', diag = F )
plot(network,
edge.color = rep(c("red","pink"), 5),           # Edge color
edge.width = seq(1, 10),                        # Edge width, defaults to 1
edge.arrow.size = 1,                           # Arrow size, defaults to 1
edge.arrow.width = 1,                          # Arrow width, defaults to 1
#edge.lty=c(1,2),                            # Line type, could be 0 or “blank”, 1 or “solid”, 2 or “dashed”, 3 or “dotted”, 4 or “dotdash”, 5 or “longdash”, 6 or “twodash”
edge.curved = c(rep(0, 5), rep(1, 5))            # Edge curvature, range 0-1 (FALSE sets it to 0, TRUE to 0.5)
)
plot(network,
vertex.color = rgb(0.8, 0.2, 0.2, 0.9),           # Node color
vertex.frame.color = "Forestgreen",            # Node border color
vertex.shape = c("circle", "square"),             # One of “none”, “circle”, “square”, “csquare”, “rectangle” “crectangle”, “vrectangle”, “pie”, “raster”, or “sphere”
vertex.size = c(15:24),                          # Size of the node (default is 15)
vertex.size2 = NA,                               # The second size of the node (e.g. for a rectangle)
edge.color = rep(c("red","pink"), 5),           # Edge color
edge.width = seq(1, 10),                        # Edge width, defaults to 1
edge.arrow.size = 1,                           # Arrow size, defaults to 1
edge.arrow.width = 1,                          # Arrow width, defaults to 1
#edge.lty=c(1,2),                            # Line type, could be 0 or “blank”, 1 or “solid”, 2 or “dashed”, 3 or “dotted”, 4 or “dotdash”, 5 or “longdash”, 6 or “twodash”
edge.curved = c(rep(0, 5), rep(1, 5))            # Edge curvature, range 0-1 (FALSE sets it to 0, TRUE to 0.5)
)
plot(network,
vertex.color = rgb(0.8, 0.2, 0.2, 0.9),           # Node color
vertex.frame.color = "Forestgreen",            # Node border color
vertex.shape = c("circle", "square"),             # One of “none”, “circle”, “square”, “csquare”, “rectangle” “crectangle”, “vrectangle”, “pie”, “raster”, or “sphere”
vertex.size = c(15:24),                          # Size of the node (default is 15)
vertex.size2 = NA,                               # The second size of the node (e.g. for a rectangle)
edge.color = rep(c("red","pink"), 5),           # Edge color
edge.width = seq(1, 10),                        # Edge width, defaults to 1
edge.arrow.size = 1,                           # Arrow size, defaults to 1
edge.arrow.width = 1,                          # Arrow width, defaults to 1
#edge.lty=c(1,2),                            # Line type, could be 0 or “blank”, 1 or “solid”, 2 or “dashed”, 3 or “dotted”, 4 or “dotdash”, 5 or “longdash”, 6 or “twodash”
edge.curved = c(rep(0, 5), rep(1, 5))            # Edge curvature, range 0-1 (FALSE sets it to 0, TRUE to 0.5)
)
graphics.off()
plot(network,
# === vertex
vertex.color = rgb(0.8,0.4,0.3,0.8),          # Node color
vertex.frame.color = "white",                 # Node border color
vertex.shape="circle",                        # One of “none”, “circle”, “square”, “csquare”, “rectangle” “crectangle”, “vrectangle”, “pie”, “raster”, or “sphere”
vertex.size=14,                               # Size of the node (default is 15)
vertex.size2=NA,                              # The second size of the node (e.g. for a rectangle)
# === vertex label
vertex.label=LETTERS[1:10],                   # Character vector used to label the nodes
vertex.label.color="white",
vertex.label.family="Times",                  # Font family of the label (e.g.“Times”, “Helvetica”)
vertex.label.font=2,                          # Font: 1 plain, 2 bold, 3, italic, 4 bold italic, 5 symbol
vertex.label.cex=1,                           # Font size (multiplication factor, device-dependent)
vertex.label.dist=0,                          # Distance between the label and the vertex
vertex.label.degree=0 ,                       # The position of the label in relation to the vertex (use pi)
# === Edge
edge.color="white",                           # Edge color
edge.width=4,                                 # Edge width, defaults to 1
edge.arrow.size=1,                            # Arrow size, defaults to 1
edge.arrow.width=1,                           # Arrow width, defaults to 1
edge.lty="solid",                             # Line type, could be 0 or “blank”, 1 or “solid”, 2 or “dashed”, 3 or “dotted”, 4 or “dotdash”, 5 or “longdash”, 6 or “twodash”
edge.curved=0.3    ,                          # Edge curvature, range 0-1 (FALSE sets it to 0, TRUE to 0.5)
)
plot(network,
# === vertex
vertex.color = rgb(0.8,0.4,0.3,0.8),          # Node color
vertex.frame.color = "white",                 # Node border color
vertex.shape="circle",                        # One of “none”, “circle”, “square”, “csquare”, “rectangle” “crectangle”, “vrectangle”, “pie”, “raster”, or “sphere”
vertex.size=14,                               # Size of the node (default is 15)
vertex.size2=NA,                              # The second size of the node (e.g. for a rectangle)
# === vertex label
vertex.label=LETTERS[1:10],                   # Character vector used to label the nodes
vertex.label.color="white",
vertex.label.family="Times",                  # Font family of the label (e.g.“Times”, “Helvetica”)
vertex.label.font=2,                          # Font: 1 plain, 2 bold, 3, italic, 4 bold italic, 5 symbol
vertex.label.cex=1,                           # Font size (multiplication factor, device-dependent)
vertex.label.dist=0,                          # Distance between the label and the vertex
vertex.label.degree=0 ,                       # The position of the label in relation to the vertex (use pi)
# === Edge
edge.color="white",                           # Edge color
edge.width=4,                                 # Edge width, defaults to 1
edge.arrow.size=1,                            # Arrow size, defaults to 1
edge.arrow.width=1,                           # Arrow width, defaults to 1
edge.lty="solid",                             # Line type, could be 0 or “blank”, 1 or “solid”, 2 or “dashed”, 3 or “dotted”, 4 or “dotdash”, 5 or “longdash”, 6 or “twodash”
edge.curved=0.3    ,                          # Edge curvature, range 0-1 (FALSE sets it to 0, TRUE to 0.5)
)
plot(network,
# === vertex
vertex.color = rgb(0.8,0.4,0.3,0.8),          # Node color
vertex.frame.color = "white",                 # Node border color
vertex.shape="circle",                        # One of “none”, “circle”, “square”, “csquare”, “rectangle” “crectangle”, “vrectangle”, “pie”, “raster”, or “sphere”
vertex.size=14,                               # Size of the node (default is 15)
vertex.size2=NA,                              # The second size of the node (e.g. for a rectangle)
# === vertex label
vertex.label=LETTERS[1:10],                   # Character vector used to label the nodes
vertex.label.color="white",
vertex.label.family="Times",                  # Font family of the label (e.g.“Times”, “Helvetica”)
vertex.label.font=2,                          # Font: 1 plain, 2 bold, 3, italic, 4 bold italic, 5 symbol
vertex.label.cex=1,                           # Font size (multiplication factor, device-dependent)
vertex.label.dist=0,                          # Distance between the label and the vertex
vertex.label.degree=0 ,                       # The position of the label in relation to the vertex (use pi)
# === Edge
edge.color="white",                           # Edge color
edge.width=4,                                 # Edge width, defaults to 1
edge.arrow.size=1,                            # Arrow size, defaults to 1
edge.arrow.width=1,                           # Arrow width, defaults to 1
edge.lty="solid",                             # Line type, could be 0 or “blank”, 1 or “solid”, 2 or “dashed”, 3 or “dotted”, 4 or “dotdash”, 5 or “longdash”, 6 or “twodash”
edge.curved=0.3    ,                          # Edge curvature, range 0-1 (FALSE sets it to 0, TRUE to 0.5)
)
plot(network,
# === vertex
vertex.color = rgb(0.8,0.4,0.3,0.8),          # Node color
vertex.frame.color = "white",                 # Node border color
vertex.shape="circle",                        # One of “none”, “circle”, “square”, “csquare”, “rectangle” “crectangle”, “vrectangle”, “pie”, “raster”, or “sphere”
vertex.size=14,                               # Size of the node (default is 15)
vertex.size2=NA,                              # The second size of the node (e.g. for a rectangle)
# === vertex label
vertex.label=LETTERS[1:10],                   # Character vector used to label the nodes
vertex.label.color="white",
vertex.label.family="Times",                  # Font family of the label (e.g.“Times”, “Helvetica”)
vertex.label.font=2,                          # Font: 1 plain, 2 bold, 3, italic, 4 bold italic, 5 symbol
vertex.label.cex=1,                           # Font size (multiplication factor, device-dependent)
vertex.label.dist=0,                          # Distance between the label and the vertex
vertex.label.degree=0 ,                       # The position of the label in relation to the vertex (use pi)
# === Edge
edge.color="white",                           # Edge color
edge.width=4,                                 # Edge width, defaults to 1
edge.arrow.size=1,                            # Arrow size, defaults to 1
edge.arrow.width=1,                           # Arrow width, defaults to 1
edge.lty="solid",                             # Line type, could be 0 or “blank”, 1 or “solid”, 2 or “dashed”, 3 or “dotted”, 4 or “dotdash”, 5 or “longdash”, 6 or “twodash”
edge.curved=0.3    ,                          # Edge curvature, range 0-1 (FALSE sets it to 0, TRUE to 0.5)
)
plot(network,
# === vertex
vertex.color = rgb(0.8,0.4,0.3,0.8),          # Node color
vertex.frame.color = "white",                 # Node border color
vertex.shape="circle",                        # One of “none”, “circle”, “square”, “csquare”, “rectangle” “crectangle”, “vrectangle”, “pie”, “raster”, or “sphere”
vertex.size=14,                               # Size of the node (default is 15)
vertex.size2=NA,                              # The second size of the node (e.g. for a rectangle)
# === vertex label
vertex.label=LETTERS[1:10],                   # Character vector used to label the nodes
vertex.label.color="white",
vertex.label.family="Times",                  # Font family of the label (e.g.“Times”, “Helvetica”)
vertex.label.font=2,                          # Font: 1 plain, 2 bold, 3, italic, 4 bold italic, 5 symbol
vertex.label.cex=1,                           # Font size (multiplication factor, device-dependent)
vertex.label.dist=0,                          # Distance between the label and the vertex
vertex.label.degree=0 ,                       # The position of the label in relation to the vertex (use pi)
# === Edge
edge.color="white",                           # Edge color
edge.width=4,                                 # Edge width, defaults to 1
edge.arrow.size=1,                            # Arrow size, defaults to 1
edge.arrow.width=1,                           # Arrow width, defaults to 1
edge.lty="solid",                             # Line type, could be 0 or “blank”, 1 or “solid”, 2 or “dashed”, 3 or “dotted”, 4 or “dotdash”, 5 or “longdash”, 6 or “twodash”
edge.curved=0.3    ,                          # Edge curvature, range 0-1 (FALSE sets it to 0, TRUE to 0.5)
)
demo(package="igraph")
pause <- function() {}
### The Zachary Karate club network
karate <- make_graph("Zachary")
summary(karate)
pause()
### Create a layout that is used from now on
karate$layout <- layout_nicely(karate)
plot(karate)
pause()
### Run cohesive blocking on it
cbKarate <- cohesive_blocks(karate)
cbKarate
pause()
### Plot the results and all the groups
plot(cbKarate, karate)
pause()
### This is a bit messy, plot them step-by-step
### See the hierarchy tree first
hierarchy(cbKarate)
plot_hierarchy(cbKarate)
## Plot the first level, blocks 1 & 2
plot(cbKarate, karate, mark.groups=blocks(cbKarate)[1:2+1],
col="cyan")
pause()
### The second group is simple, plot its more cohesive subgroup
plot(cbKarate, karate, mark.groups=blocks(cbKarate)[c(2,5)+1], col="cyan")
pause()
### The first group has more subgroups, plot them
sub1 <- blocks(cbKarate)[parent(cbKarate)==1]
sub1
plot(cbKarate, karate, mark.groups=sub1)
pause()
library(VennDiagram)
install.packages('VennDiagram')
library(VennDiagram)
SNP_pop_1=paste(rep("SNP_" , 200) , sample(c(1:1000) , 200 , replace=F) , sep="")
SNP_pop_2=paste(rep("SNP_" , 200) , sample(c(1:1000) , 200 , replace=F) , sep="")
SNP_pop_3=paste(rep("SNP_" , 200) , sample(c(1:1000) , 200 , replace=F) , sep="")
venn.diagram(
x = list(SNP_pop_1 , SNP_pop_2 , SNP_pop_3),
category.names = c("SNP pop 1" , "SNP pop 2 " , "SNP pop 3"),
filename = '#14_venn_diagramm.png',
output = TRUE ,
imagetype ="png" ,
height = 480 ,
width = 480 ,
resolution = 300,
compression = "lzw",
lwd = 2,
lty = 'blank',
fill = c('yellow', 'purple', 'green'),
cex = 1,
fontface = "bold",
fontfamily = "sans",
cat.cex = 0.6,
cat.fontface = "bold",
cat.default.pos = "outer",
cat.pos = c(-27, 27, 135),
cat.dist = c(0.055, 0.055, 0.085),
cat.fontfamily = "sans",
rotation = 1
)
setwd("~/Documents/Programación/GIT/Learning-R/Graphics/Examples/Maps")
# Library
library(leaflet)
# We always initiate a leaflet map with the leaflet() function
m=leaflet()
# Then we Add default OpenStreetMap map tiles
m=addTiles(m)
m
library(leaflet)
install.packages('leaflet')
library(leaflet)
m = leaflet()
m = addTiles(m)
m
# Library
library(leaflet)
# We always initiate a leaflet map with the leaflet() function
m = leaflet()
# Then we Add default OpenStreetMap map tiles
m = addTiles(m)
# We can choose a zone:
m = setView(m, lng = 166.45, lat = -21, zoom = 7)
m
# Library
library(leaflet)
# Background 1: NASA
m = leaflet() %>% addTiles() %>% setView( lng = 2.34, lat = 48.85, zoom = 5 ) %>% addProviderTiles("NASAGIBS.ViirsEarthAtNight2012")
m
# Background 2: World Imagery
m = leaflet() %>% addTiles() %>% setView( lng = 2.34, lat = 48.85, zoom = 3 ) %>% addProviderTiles("Esri.WorldImagery")
m
Library
library(leaflet)
# Create 10 markers (Random points)
data = data.frame(long = sample(seq(-150,150),10) ,  lat = sample(seq(-50,50),10) , val = round(rnorm(10),2) , name = paste("point",letters[1:10],sep="_")  )
# Show a marker at each position
m = leaflet(data = data) %>% addTiles() %>% addMarkers(~long, ~lat, popup = ~as.character(name))
m
# Library
library(leaflet)
# Create 20 markers (Random points)
data = data.frame(long = sample(seq(-150,150),20) ,
lat = sample(seq(-50,50),20) ,
val = round(rnorm(20),2) ,
name = paste("point",letters[1:20],sep = "_")  )
# Show a rectangle
m = leaflet() %>% addTiles() %>%
addRectangles(
lng1 = -118.456554, lat1 = 34.078039,
lng2 = -118.436383, lat2 = 34.062717,
fillColor = "transparent"
)
m
# source : https://www.r-graph-gallery.com/182-add-circles-rectangles-on-leaflet-map/
# Library
library(leaflet)
# Create 20 markers (Random points)
data = data.frame(long = sample(seq(-150,150),20) ,
lat = sample(seq(-50,50),20) ,
val = round(rnorm(20),2) ,
name = paste("point", letters[1:20], sep = "_")  )
# Show a circle at each position
m = leaflet(data = data) %>% addTiles() %>% addCircleMarkers(~long, ~lat , popup = ~as.character(name))
m
# Library
library(leaflet)
# Create 20 markers (Random points)
data = data.frame(long = sample(seq(-150,150),20) ,
lat = sample(seq(-50,50),20) ,
val = round(rnorm(20),2) ,
name = paste("point" , letters[1:20], sep = "_")  )
# Show a CUSTOM circle at each position. Size defined in Pixel. Size does not change when you zoom
m = leaflet(data = data) %>% addTiles() %>%  addProviderTiles("Esri.WorldImagery") %>%
addCircleMarkers(~long, ~lat,
radius = ~val * 14 ,
color = ~ifelse(data$val>0 , "red", "orange"),
stroke = TRUE,
fillOpacity = 0.2,
popup = ~as.character(name)
)
m
# Create 20 markers (Random points)
data=data.frame(long=sample(seq(-150,150),20) ,  lat=sample(seq(-50,50),20) , val=round(rnorm(20),2) , name=paste("point",letters[1:20],sep="_")  )
# Show a CUSTOM circle at each position. Size in meters --> change when you zoom.
m=leaflet(data = data) %>% addTiles()  %>%  addProviderTiles("Esri.WorldImagery") %>%
addCircles(~long, ~lat,
radius=~val*1000000 ,
color=~ifelse(data$val>0 , "red", "orange"),
stroke = TRUE,
fillOpacity = 0.2,
popup = ~as.character(name)
) %>%
setView( lng = 166.45, lat = 21, zoom = 2)
m
