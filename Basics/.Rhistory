read.table?
ccals
cls
data("iris")
dim(iris)
iris
levels(dataset$Species)
levels(iris$Species)
percentage <- prop.table(table(iris$Species)) * 100
cbind(freq = table(iris$Species), percentage = percentage)
summary(iris)
y <- iris[, 5]
boxplot(x[, i], main = names(iris)[i])
data("iris")
dim(iris)   # filas, columnas
for i in 1:4{
boxplot(x[, i], main = names(iris)[i])
}
x <- iris[, 1:4]
x
par(mfrow = c(1, 4))
for i in 1:4{
boxplot(x[, i], main = names(iris)[i])
}
boxplot(x[,i], main = names(iris)[i])
{
boxplot(x[,i], main = names(iris)[i])
}
ce,ar
install.packages("Hmisc")
library(Hsmisc)
library(Hmisc)
install.packages("Openxlex")
summary(iris)
sumary([1:50, ])
sumary(irirs[1:50, ])
sumary(iris[1:50, ])
summary(iris[1:50, ])
summary(iris[51:100,])
summary(iris[101:,])
summary(iris[101:150,])
naciento <- 04-04-1994
naciemiento
hoy <- 26-09-2017
hoy - nacimiento
hoy - naciento
clear
nacimiento <- as.Date("1994-04-04")
hoy <- as.Date("2017-09-26")
hoy - nacimiento
1994 + 70
muerte <- as.Date("2064-04-04")
muerte-hoy
16992 / 365.25
weekdays(nacimiento)
weekdays(muerte)
weekdays(hoy)
month(muerte)
months(muerte)
months(hoy)
months(nacimiento)
Sys.getlocale()
Sys.getlocale("LC_ALL")
Sys.getlocale("LC_ALL", "esp")
Sys.setlocale("LC_ALL", "esp")
Sys.setlocale("LC_ALL", "vas")
Sys.setlocale("LC_ALL", "Basque")
sys.setlocale("LC_ALL", "Basque")
Sys.setlocale("LC_ALL", "Basque")
which(is.na(Iris))  # si el dato es missing True, nos
Iris = data("Iris")
Iris = data("iris")
Iris = data("iris")
which(is.na(Iris))  # si el dato es missing True, nos
which(is.na(Iris), arr.ind = TRUE)
boxplot(mgp~cyl, Iris, main = 'primer boxplot con R', xlab = "eje x", ylab = "ylab")
boxplot(mgp~cyl, Iris, main = "primer boxplot con R", xlab = "eje x", ylab = "ylab")
install.packages(""datasets.load"")
install.packages(datasets.load")
mclwncsa
c kejaf aca
-sda
cnnkd
mankcsa
cknasc a
as a
nkanc
alcpmalksmclac+
install.packages("datasets")
install.packages("datasets")
load("iris")
data("iris")
iris
x <- iris[,1:2]
x
x <- iris[,1]
x
len(x)
dim(x)
summary(x)
x <- c(1:100)
y <- c(1:2:200)
y <- c(1:200:2)
y <- 2*x
plot(x, y)
xlabel("ejex")
plot(x, y, xlabel= "ejeX")
X = iris[,1]
X
length()
length(C)
length(X)
Y <- c(1:150)
length(Y)
plot(Y, X)
par(mfrow = x(1;4))
par(mfrow = x(1:4))
par(mfrow = c(1:4))
graphics.off()
par(mfrow = c(1:4))
par(mfrow = c(1, 4))
for (i in 1:4){}
for (i in 1:4){}
for (i in 1:4){plot(Y, iris[, i])}
summary(data("iris"))
Iris <- data("iris")
summary(Iris)
Iris_setosa = iris[iris == "setosa"]
Iris_setosa
data("iris")
Iris_setosa = iris[iris == "setosa"]
Iris_setosa
Iris_setosa[1:20, 1]
Iris_setosa[1:50, 1]
plot(vector)
vector
plot(p)
p <- c(1:20)
plot(p)
plot(p, type = "0", col = "blue")     # blue points overlayed by a line
plot(p, type = "o", col = "blue")     # blue points overlayed by a line
p <- c(1:20)
title("ponints", col.main = "red", font.main = 4)
p <- c(2, 3, 4.3, 2, 4, 3, 5, 4)
plot(p)         # just points
title("points", col.main = "red", font.main = 4)
plot(p, type = "o", col = "blue")     # blue points overlayed by a line
title("points", col.main = "red", font.main = 4)
title(main = "Money spend during a week", col.main = "red", font = 4)
graphics.off() # close all the graphics
dinner_spend <- c(10, 10, 10, 15.5, 10, 13, 17)
plot(lunch_spend, type = "o", col = "blue", ylimit = c(0, 6))     # using a y axis in a range (0, 6)
lines(dinner_spend, type = "o", pch = 22, lty = 2, col = "red") # red dashed line and square points
plot(lunch_spend, type = "o", col = "blue", ylim = c(0, 6))     # using a y axis in a range (0, 6)
lunch_spend <- c(10.99, 9, 6.1, 9.50, 6.30, 12, 18)
plot(lunch_spend, type = "o", col = "blue", ylim = c(0, 6))     # using a y axis in a range (0, 6)
plot(lunch_spend, type = "o", col = "blue")
plot(lunch_spend, type = "o", col = "blue", ylim = c(1, 12))
plot(lunch_spend, type = "o", col = "blue")     # using a y axis in a range (0, 6)
c = 1:10
c
mac(c)
max(c)
plot(lunch_spend, type = "o", col = "blue", ylim = c(1, max(lunch_spend) + 1))
lines(dinner_spend, type = "o", pch = 22, lty = 2, col = "red")
title("Money spend in food", col.main = "red", font.main = 4)
length((c))
graphics.off()
plot(lunch_spend, type = "o", col = "blue")     # using a y axis in a range (0, 6)
title("Lunch spend during a week", col.main = "red", font.main = 4)
plot(X)         # just points
plot(X)         # just points
X <- c(10.99, 9, 6.1, 9.50, 6.30, 12, 18)
plot(X)         # just points
plot(X, type = "o", col = "blue")     # blue points overlayed by a line, just that
"testeando los comentarios multiínea en R"
"coment"
/* comentario multilínea en R */
''
'''
aknda
oaneac
wevoan
x <- matrix(1:6, nrow = 2)
y <- 2*x
matplot(x, y) # just matplot, with no parameters
x <- matrix(1:45, nrow = 5)
y <- 2*x
matplot(x, y) # just matplot, with no parameters
matplot(x, y, type = 'o')
matplot(x, y, type = 'o')
matplot(x, y) # just matplot, with no parameters
matplot(x, y, type = 'o')
matplot(x, y, type = 'o', col = "black")
matplot(x, y, type = 'o', col = "black", lend = "p")
matplot(x, y, type = 'o', col = "black")
matplot(x, y, type = 'o', col = "black", lend = "p")
matplot(x, y, type = 'o', col = "black")
lends <- c("round","butt","square")
matplot(x, y, type = 'o', col = "black", lend = lends)
lends <- c("round","butt","square")
matplot(x, y, type = 'o', col = "black", lend = lends)
matplot(x, y, type = 'c', col = "black", lend = lends)
lends <- c("round","butt","square")
matplot(x, y, type = 'c', col = "black", lend = lends)
y <- 2*x
matplot(x, y) # just matplot, with no parameters
matplot(x, y, type = 'o', col = "black")
lends <- c("round","butt","square")
matplot(x, y, type = 'c', col = "black", lend = lends)
matplot(x, y, type = 'c', col = "black", lend = lends)
matplot(x, y, type = 'c', col = "black")
matplot(x, y, type = 'c', col = "black")
matplot(x, y, type = 'l', col = "black")
matplot(x, y, type = 'l', col = c("black", "red"))
data("iris")
matplot(iris)
summary(iris)
matplot(iris$Sepal.Length, main = "Sepal Length")
matplot(iris$Sepal.Length, main = "Sepal Length", ylab = "", sub = "of all the set")
matplot(iris[1:50, ]$Sepal.Length)
matplot(iris[1:50, ]$Sepal.Length, main = "Setosa Sepal Length", ylab = "", sub ="just for Setosa"
matplot(iris$Sepal.Length, main = "Sepal Length", ylab = "", sub = "of all the set")
matplot(iris[1:50, ]$Sepal.Length, main = "Setosa Sepal Length", ylab = "", sub ="just for Setosa"
matplot(iris[1:50, ]$Sepal.Length, main = "Setosa Sepal Length", ylab = "", sub ="just for Setosa")
matplot(iris$Sepal.Length, main = "Sepal Length", ylab = "", sub = "of all the set")
matplot(iris[1:50, ]$Sepal.Length, main = "Setosa Sepal Length", ylab = "", sub ="just for Setosa")
matplot(iris[1:50, ]$Sepal.Length, style = "o", main = "Setosa Sepal Length", ylab = "", sub ="just for Setosa")
matplot(iris[1:50, ]$Sepal.Length, style = "o", main = "Setosa Sepal Length", ylab = "", sub ="just for Setosa")
matplot(iris[1:50, ]$Sepal.Length, type = "o", main = "Setosa Sepal Length", ylab = "", sub ="just for Setosa")
matplot(iris[1:50, ]$Sepal.Length, type = "p", main = "Setosa Sepal Length", ylab = "", sub ="p type")
matplot(iris[1:50, ]$Sepal.Length, type = "n", main = "Setosa Sepal Length", ylab = "", sub ="o type")
matplot(iris[1:50, ]$Sepal.Length, type = "b", main = "Setosa Sepal Length", ylab = "", sub ="o type")
matplot(iris[1:50, ]$Sepal.Length, type = "b", main = "Setosa Sepal Length", ylab = "", sub ="b type")
matplot(iris[1:50, ]$Sepal.Length, type = "o", main = "Setosa Sepal Length", ylab = "", sub ="o type", lend = "round")
matplot(iris[1:50, ]$Sepal.Length, type = "o", main = "Setosa Sepal Length", ylab = "", sub ="o type", lend = "round")
matplot(iris[1:50, ]$Sepal.Length, type = "o", main = "Setosa Sepal Length", ylab = "", sub ="o type, lend round", lend = "round")
matplot(iris[1:50, ]$Sepal.Length, type = "o", main = "Setosa Sepal Length", ylab = "", sub ="o type, lend square", lend = "square")
matplot(iris[1:50, ]$Sepal.Length, type = "o", main = "Setosa Sepal Length", ylab = "", sub ="o type, lend square", lend = "square")
matplot(iris[1:50, ]$Sepal.Length, type = "c", main = "Setosa Sepal Length", ylab = "", sub ="c type, lend square", lend = "square")
matplot(iris[1:50, ]$Sepal.Length, type = "c", main = "Setosa Sepal Length", ylab = "", sub ="c type, lend butt", lend = "butt")
plot()
boxplot(x)
x <- c(2, 32, 3, 24, 2, 34, 2, 423, 2, 4, 2, 32, 23, 2, 342)
boxplot(x)
x <- c(2, 4, 2, 3, 4, 5, 7, 4)
boxplot(x)
boxplot(x, horizontal = TRUE)
boxplot(x, varwidth = TRUE) #  make box plot widths proportional to the square root of the sample sizes
boxplot(x, horizontal = TRUE) # make it horizontal
boxplot(x, varwidth = TRUE) #  make box plot widths proportional to the square root of the sample sizes
boxplot(x)
boxplot(x, varwidth = TRUE) #  make box plot widths proportional to the square root of the sample sizes
boxplot(x, horizontal = TRUE) # make it horizontal
boxplot(iris)
boxplot(iris$Sepal.Length, main = "Sepal Length", sub = "all the flowers")
boxplot(iris[1:50, ]$Sepal.Length, main = "Sepal Length", sub = "only Setosa")
boxplot(iris[1:50, ]$Sepal.Length, main = "Sepal Length", sub = "only Setosa")
boxplot(iris$Sepal.Length, main = "Sepal Length", sub = "all the flowers")
boxplot(iris[1:50, ]$Sepal.Length, main = "Sepal Length", sub = "only Setosa")
par(nfrow = c(1, 3))
boxplot(iris[1:50, ]$Sepal.Length, main = "Sepal Length", sub = "only Setosa")
boxplot(iris[51:100, ]$Sepal.Length, main = "Sepal Length", sub = "only Versicolor")
par(mfrow = c(1, 3))
boxplot(iris[1:50, ]$Sepal.Length, main = "Sepal Length", sub = "only Setosa")
boxplot(iris[51:100, ]$Sepal.Length, main = "Sepal Length", sub = "only Versicolor")
boxplot(iris[101:150, ]$Sepal.Length, main = "Sepal Length", sub = "only Virginica")
summary(iris)
boxplot(iris$Petal.Length, main = "Petal Length", sub = "all the flowers")
par()
boxplot(iris$Petal.Length, main = "Petal Length", sub = "all the flowers")
boxplot(iris[1:50, ]$Sepal.Length, main = "Sepal Length", sub = "only Setosa")
boxplot(iris[51:100, ]$Sepal.Length, main = "Sepal Length", sub = "only Versicolor")
boxplot(iris[101:150, ]$Sepal.Length, main = "Sepal Length", sub = "only Virginica")
par()
boxplot(iris$Petal.Length, main = "Petal Length", sub = "all the flowers")
par(mfrow=c(1,1))
boxplot(iris$Petal.Length, main = "Petal Length", sub = "all the flowers")
boxplot(iris$Petal.Length, main = "Petal Length", sub = "all the flowers", col = "red")
boxplot(iris$Sepal.Length, main = "Sepal Length", sub = "all the flowers")
boxplot(iris[1:50, ]$Sepal.Length, main = "Sepal Length", sub = "only Setosa")
par(mfrow = c(1, 3))
boxplot(iris[1:50, ]$Sepal.Length, main = "Sepal Length", sub = "only Setosa")
boxplot(iris[51:100, ]$Sepal.Length, main = "Sepal Length", sub = "only Versicolor")
boxplot(iris[101:150, ]$Sepal.Length, main = "Sepal Length", sub = "only Virginica")
par(mfrow=c(1,1))     # ugly way to reset 'par'
boxplot(iris$Petal.Length, main = "Petal Length", sub = "all the flowers", col = "red")
g_range == range(0, max(Y))   # returns TRUE TRUE
plot(lunch_spend, type = "o", col = "blue", ylim = g_range, axes = FALSE, ann = FALSE)
lines(dinner_spend, type = "o", pch = 22, lty = 2, col = "red")
title("Money spend in food", col.main = "red", font.main = 4)
days <- c("Mond", "Tues", "Wed", "Thu", "Fri", "Sat", "Sun")
axis(1, at = 1:length(days), lab = days)
axis(2, at = 4 * grange[2])
setwd("~/Documents/Programación/GIT/Learning-R/Basics")
plot(cars)
plot(cars)
v <- c(1, 2, 3, 4, 5)
v
1:5
1:5
seq(3, 15, 3)
rep(c(5, 10), 4)
```{r include = TRUE}
3 + c(1:3)
10 + c(1:3)
10 + c(1:3)
c(1:3) + c(1:5)
c(1:6) + c(1:12)  # las longitudes son múltiplos un de la otra
c(1:4) + c(1:7)
x <- c(NA; NaN, Inf, NULL, 4, 0)
x <- c(NA, NaN, Inf, NULL, 4, 0)
1/x
x - x
1/x - (x - x)
x <- c(1:10)^2
x
x[3]
x[c(1, 2, 3, 4)]
```{r include = TRUE}
x[-c(1, 2, 3, 4)]
x[x > 20]
which(x > 20)
5 + x
5 + x
1:5
seq(3, 15, 3)
rep(c(5, 10), 4)
x <- c(1:10)
5 + x
c(1:3) + c(1:5)
c(1:6) + c(1:12)  # las longitudes son múltiplos un de la otra
c(1:4) + c(1:7)
x <- c(NA, NaN, Inf, NULL, 4, 0)
1/x
x - x
1/x - (x - x)
x <- c(1:10)^2
x
x[3]
x[c(1, 2, 3, 4)]
x[-c(1, 2, 3, 4)]
x[x > 20]
which(x > 20)
matrix(1:3, nrow = 2, ncol = 3)
matrix(1:9, 3, 3)
c(1:3)
c(1:3) + matrix(1:9, 3, 3)
matrix(1:9, 3, 3)
c(1:3)
c(1:3) + matrix(1:9, 3, 3)
m <- matrix(5:8, 3, 4)
x[x > 7]          # elementos
which(x > 7)      # posiciones
m <- matrix(5:8, 3, 4)
m
x[x > 7]          # elementos
which(x > 7)      # posiciones
m <-  matrix(1:10, 2, 5)
m[1, 1]
m[, 1]
m[1, ]
m[-1, -1]
m <-  matrix(1:10, 2, 5)
m
m[1, 1]
m[, 1]
m[1, ]
m[-1, -1]
y <- c(1:4)
x <- c(4:8)
y <- c(1:4)
x <- c(4:8)
y
x
y <- c(1:4)
x <- c(5:8)
y
x
y <- c(1:4)
x <- c(5:8)
y
x
cbind(x, y)
rbind(x, y)
x <- matrix(1:9, 3, 3)
x
mean(x)
apply(x, 1, mean) # actuamos sobre las filas de x
apply(x, 2, mean) # actuamos sobre las columnas de x
x
apply(x, 1, sort) # actuamos sobre las filas de la matriz x
A <- matrix(1:9, 3, 3)
B <- matrix(9:18, 3, 3)
A
B
A <- matrix(1:9, 3, 3)
B <- matrix(10:18, 3, 3)
A
B
A %*% B
A * B
A * B
t(A)
det(A)
diag(A)
b = matrix(1:3, 3, 1)
b
solve(A, b)
det(A)
det(B)
b = matrix(1:3, 3, 1)
b
solve(A, b)    El determinante de A es 0, esto emitirá un error
b = matrix(1:3, 3, 1)
b
solve(A, b)    #El determinante de A es 0, esto emitirá un error
b = matrix(1:3, 3, 1)
b
#solve(A, b)    #El determinante de A es 0, esto emitirá un error
solve(B, b)
C <- matrix(c(2, 32, 32), 3, 3)
b = matrix(1:3, 3, 1)
b
solve(C, b)
solve(A)
solve(A)
#solve(A)
solve(C)
eigen(A)
lista <- list(nombre = "Jose", Pareja = "Elena", no.hijos = 3, edades.hijos = c(1, 2, 4))
str(lista)
lista[[3]]
lista[[4]]
lista$edades.hijos
lista <- list(Nombre = "Jose", Pareja = "Elena", no.hijos = 3, edades.hijos = c(1, 2, 4))
str(lista)
lista$edades.hijos
lista$Pareja
lista[[3]]
lista[[3]]
lista[[4]]
lista[[3]]
lista[[4]]
lista[[2]]
lista[[4]]
lista[[2]]
lista[1]
lista[[1]]
lista[2:4]
lista[[2:4]]
lista[1]
lista[[1]]
lista[1:3]
lista[[1:3]]
pesos <- c(80.0, 54.5, 70, 89)
nombres <- c("Manuel", "Raquel", "Miguel", "Boliche")
fichero <- data.frame(Pesos = pesos, Individuos = nombres)
str(fichero)
pesos <- c(80.0, 54.5, 70, 89)
nombres <- c("Manuel", "Raquel", "Miguel", "Boliche")
fichero <- data.frame(Pesos = pesos, Individuos = nombres)
fichero
fichero$Pesos
fichero[[2]]
fichero[2, ]
fichero[2, ]
fichero[2, ]
sapply(faithful, summary)
lapply(faithful, summary)
lista <- c(2, 12, 12, 12, 12 , 1, 3, 4, 5, 2, 2, 2, 2, 4, 5, 6 ,8)
factor(lista)
fichero[2, ]
fichero[1, ]
head(iris)
iris$Species
tapply(iris$Petal.Length, iris$Species, mean)
```{r include = TRUE}
help("Distributions"")
```{r include = TRUE}
curve(dexp(x), from = 0, to =10)
curve(dexp(x), from = 0, to =10)
plot(dexp(x), from = 0, to =10) # Representa la densidad de una exponencial de media 1 entre 0 y 10
curve(dexp(x), from = 0, to =10) # Representa la densidad de una exponencial de media 1 entre 0 y 10
rbinom(20, 1, 0.5)
x <- rbinom(20, 1, 0.5)  # Genera 20 observaciones con distribución B(1,0.5)
x
table(x) # Calcula las fecuencias absolutas de los valores generados
x <- rbinom(20, 1, 0.5)  # Genera 20 observaciones con distribución B(1,0.5)
x
table(x) # Calcula las fecuencias absolutas de los valores generados
pnorm(3.5, mean = 3, sd = .5)
qnorm(0.7)
qnorm(0.7, sd = 0.5)
```{r include = TRUE}
qnorm(0.955)
qnorm(0.99)
qnorm(0.955)
qnorm(0.99)
x <- rnorm(100, mean = 10, sd = 1)
x
mean(x)
sd(x)
hist(x)
mean(x)
sd(x)
```{r include = TRUE}
hist(x)
```{r include = TRUE}
boxplot(x)
hist(x, freq = FALSE)    # freq = FALSE para que el área total sea 1
curve(dnorm(x, mean = 10, sd = 1), from = 7, to = 13, add = TRUE)
