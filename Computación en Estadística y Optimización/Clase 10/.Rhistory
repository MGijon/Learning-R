summary(x)
x <- c(1:100)
y <- c(1:2:200)
y <- c(1:200:2)
y <- 2*x
plot(x, y)
xlabel("ejex")
plot(x, y, xlabel= "ejeX")
X = iris[,1]
X
length()
length(C)
length(X)
Y <- c(1:150)
length(Y)
plot(Y, X)
par(mfrow = x(1;4))
par(mfrow = x(1:4))
par(mfrow = c(1:4))
graphics.off()
par(mfrow = c(1:4))
par(mfrow = c(1, 4))
for (i in 1:4){}
for (i in 1:4){}
for (i in 1:4){plot(Y, iris[, i])}
summary(data("iris"))
Iris <- data("iris")
summary(Iris)
Iris_setosa = iris[iris == "setosa"]
Iris_setosa
data("iris")
Iris_setosa = iris[iris == "setosa"]
Iris_setosa
Iris_setosa[1:20, 1]
Iris_setosa[1:50, 1]
plot(vector)
vector
plot(p)
p <- c(1:20)
plot(p)
plot(p, type = "0", col = "blue")     # blue points overlayed by a line
plot(p, type = "o", col = "blue")     # blue points overlayed by a line
p <- c(1:20)
title("ponints", col.main = "red", font.main = 4)
p <- c(2, 3, 4.3, 2, 4, 3, 5, 4)
plot(p)         # just points
title("points", col.main = "red", font.main = 4)
plot(p, type = "o", col = "blue")     # blue points overlayed by a line
title("points", col.main = "red", font.main = 4)
title(main = "Money spend during a week", col.main = "red", font = 4)
graphics.off() # close all the graphics
dinner_spend <- c(10, 10, 10, 15.5, 10, 13, 17)
plot(lunch_spend, type = "o", col = "blue", ylimit = c(0, 6))     # using a y axis in a range (0, 6)
lines(dinner_spend, type = "o", pch = 22, lty = 2, col = "red") # red dashed line and square points
plot(lunch_spend, type = "o", col = "blue", ylim = c(0, 6))     # using a y axis in a range (0, 6)
lunch_spend <- c(10.99, 9, 6.1, 9.50, 6.30, 12, 18)
plot(lunch_spend, type = "o", col = "blue", ylim = c(0, 6))     # using a y axis in a range (0, 6)
plot(lunch_spend, type = "o", col = "blue")
plot(lunch_spend, type = "o", col = "blue", ylim = c(1, 12))
plot(lunch_spend, type = "o", col = "blue")     # using a y axis in a range (0, 6)
c = 1:10
c
mac(c)
max(c)
plot(lunch_spend, type = "o", col = "blue", ylim = c(1, max(lunch_spend) + 1))
lines(dinner_spend, type = "o", pch = 22, lty = 2, col = "red")
title("Money spend in food", col.main = "red", font.main = 4)
length((c))
graphics.off()
plot(lunch_spend, type = "o", col = "blue")     # using a y axis in a range (0, 6)
title("Lunch spend during a week", col.main = "red", font.main = 4)
plot(X)         # just points
plot(X)         # just points
X <- c(10.99, 9, 6.1, 9.50, 6.30, 12, 18)
plot(X)         # just points
plot(X, type = "o", col = "blue")     # blue points overlayed by a line, just that
"testeando los comentarios multiínea en R"
"coment"
/* comentario multilínea en R */
''
'''
aknda
oaneac
wevoan
x <- matrix(1:6, nrow = 2)
y <- 2*x
matplot(x, y) # just matplot, with no parameters
x <- matrix(1:45, nrow = 5)
y <- 2*x
matplot(x, y) # just matplot, with no parameters
matplot(x, y, type = 'o')
matplot(x, y, type = 'o')
matplot(x, y) # just matplot, with no parameters
matplot(x, y, type = 'o')
matplot(x, y, type = 'o', col = "black")
matplot(x, y, type = 'o', col = "black", lend = "p")
matplot(x, y, type = 'o', col = "black")
matplot(x, y, type = 'o', col = "black", lend = "p")
matplot(x, y, type = 'o', col = "black")
lends <- c("round","butt","square")
matplot(x, y, type = 'o', col = "black", lend = lends)
lends <- c("round","butt","square")
matplot(x, y, type = 'o', col = "black", lend = lends)
matplot(x, y, type = 'c', col = "black", lend = lends)
lends <- c("round","butt","square")
matplot(x, y, type = 'c', col = "black", lend = lends)
y <- 2*x
matplot(x, y) # just matplot, with no parameters
matplot(x, y, type = 'o', col = "black")
lends <- c("round","butt","square")
matplot(x, y, type = 'c', col = "black", lend = lends)
matplot(x, y, type = 'c', col = "black", lend = lends)
matplot(x, y, type = 'c', col = "black")
matplot(x, y, type = 'c', col = "black")
matplot(x, y, type = 'l', col = "black")
matplot(x, y, type = 'l', col = c("black", "red"))
data("iris")
matplot(iris)
summary(iris)
matplot(iris$Sepal.Length, main = "Sepal Length")
matplot(iris$Sepal.Length, main = "Sepal Length", ylab = "", sub = "of all the set")
matplot(iris[1:50, ]$Sepal.Length)
matplot(iris[1:50, ]$Sepal.Length, main = "Setosa Sepal Length", ylab = "", sub ="just for Setosa"
matplot(iris$Sepal.Length, main = "Sepal Length", ylab = "", sub = "of all the set")
matplot(iris[1:50, ]$Sepal.Length, main = "Setosa Sepal Length", ylab = "", sub ="just for Setosa"
matplot(iris[1:50, ]$Sepal.Length, main = "Setosa Sepal Length", ylab = "", sub ="just for Setosa")
matplot(iris$Sepal.Length, main = "Sepal Length", ylab = "", sub = "of all the set")
matplot(iris[1:50, ]$Sepal.Length, main = "Setosa Sepal Length", ylab = "", sub ="just for Setosa")
matplot(iris[1:50, ]$Sepal.Length, style = "o", main = "Setosa Sepal Length", ylab = "", sub ="just for Setosa")
matplot(iris[1:50, ]$Sepal.Length, style = "o", main = "Setosa Sepal Length", ylab = "", sub ="just for Setosa")
matplot(iris[1:50, ]$Sepal.Length, type = "o", main = "Setosa Sepal Length", ylab = "", sub ="just for Setosa")
matplot(iris[1:50, ]$Sepal.Length, type = "p", main = "Setosa Sepal Length", ylab = "", sub ="p type")
matplot(iris[1:50, ]$Sepal.Length, type = "n", main = "Setosa Sepal Length", ylab = "", sub ="o type")
matplot(iris[1:50, ]$Sepal.Length, type = "b", main = "Setosa Sepal Length", ylab = "", sub ="o type")
matplot(iris[1:50, ]$Sepal.Length, type = "b", main = "Setosa Sepal Length", ylab = "", sub ="b type")
matplot(iris[1:50, ]$Sepal.Length, type = "o", main = "Setosa Sepal Length", ylab = "", sub ="o type", lend = "round")
matplot(iris[1:50, ]$Sepal.Length, type = "o", main = "Setosa Sepal Length", ylab = "", sub ="o type", lend = "round")
matplot(iris[1:50, ]$Sepal.Length, type = "o", main = "Setosa Sepal Length", ylab = "", sub ="o type, lend round", lend = "round")
matplot(iris[1:50, ]$Sepal.Length, type = "o", main = "Setosa Sepal Length", ylab = "", sub ="o type, lend square", lend = "square")
matplot(iris[1:50, ]$Sepal.Length, type = "o", main = "Setosa Sepal Length", ylab = "", sub ="o type, lend square", lend = "square")
matplot(iris[1:50, ]$Sepal.Length, type = "c", main = "Setosa Sepal Length", ylab = "", sub ="c type, lend square", lend = "square")
matplot(iris[1:50, ]$Sepal.Length, type = "c", main = "Setosa Sepal Length", ylab = "", sub ="c type, lend butt", lend = "butt")
plot()
boxplot(x)
x <- c(2, 32, 3, 24, 2, 34, 2, 423, 2, 4, 2, 32, 23, 2, 342)
boxplot(x)
x <- c(2, 4, 2, 3, 4, 5, 7, 4)
boxplot(x)
boxplot(x, horizontal = TRUE)
boxplot(x, varwidth = TRUE) #  make box plot widths proportional to the square root of the sample sizes
boxplot(x, horizontal = TRUE) # make it horizontal
boxplot(x, varwidth = TRUE) #  make box plot widths proportional to the square root of the sample sizes
boxplot(x)
boxplot(x, varwidth = TRUE) #  make box plot widths proportional to the square root of the sample sizes
boxplot(x, horizontal = TRUE) # make it horizontal
boxplot(iris)
boxplot(iris$Sepal.Length, main = "Sepal Length", sub = "all the flowers")
boxplot(iris[1:50, ]$Sepal.Length, main = "Sepal Length", sub = "only Setosa")
boxplot(iris[1:50, ]$Sepal.Length, main = "Sepal Length", sub = "only Setosa")
boxplot(iris$Sepal.Length, main = "Sepal Length", sub = "all the flowers")
boxplot(iris[1:50, ]$Sepal.Length, main = "Sepal Length", sub = "only Setosa")
par(nfrow = c(1, 3))
boxplot(iris[1:50, ]$Sepal.Length, main = "Sepal Length", sub = "only Setosa")
boxplot(iris[51:100, ]$Sepal.Length, main = "Sepal Length", sub = "only Versicolor")
par(mfrow = c(1, 3))
boxplot(iris[1:50, ]$Sepal.Length, main = "Sepal Length", sub = "only Setosa")
boxplot(iris[51:100, ]$Sepal.Length, main = "Sepal Length", sub = "only Versicolor")
boxplot(iris[101:150, ]$Sepal.Length, main = "Sepal Length", sub = "only Virginica")
summary(iris)
boxplot(iris$Petal.Length, main = "Petal Length", sub = "all the flowers")
par()
boxplot(iris$Petal.Length, main = "Petal Length", sub = "all the flowers")
boxplot(iris[1:50, ]$Sepal.Length, main = "Sepal Length", sub = "only Setosa")
boxplot(iris[51:100, ]$Sepal.Length, main = "Sepal Length", sub = "only Versicolor")
boxplot(iris[101:150, ]$Sepal.Length, main = "Sepal Length", sub = "only Virginica")
par()
boxplot(iris$Petal.Length, main = "Petal Length", sub = "all the flowers")
par(mfrow=c(1,1))
boxplot(iris$Petal.Length, main = "Petal Length", sub = "all the flowers")
boxplot(iris$Petal.Length, main = "Petal Length", sub = "all the flowers", col = "red")
boxplot(iris$Sepal.Length, main = "Sepal Length", sub = "all the flowers")
boxplot(iris[1:50, ]$Sepal.Length, main = "Sepal Length", sub = "only Setosa")
par(mfrow = c(1, 3))
boxplot(iris[1:50, ]$Sepal.Length, main = "Sepal Length", sub = "only Setosa")
boxplot(iris[51:100, ]$Sepal.Length, main = "Sepal Length", sub = "only Versicolor")
boxplot(iris[101:150, ]$Sepal.Length, main = "Sepal Length", sub = "only Virginica")
par(mfrow=c(1,1))     # ugly way to reset 'par'
boxplot(iris$Petal.Length, main = "Petal Length", sub = "all the flowers", col = "red")
g_range == range(0, max(Y))   # returns TRUE TRUE
plot(lunch_spend, type = "o", col = "blue", ylim = g_range, axes = FALSE, ann = FALSE)
lines(dinner_spend, type = "o", pch = 22, lty = 2, col = "red")
title("Money spend in food", col.main = "red", font.main = 4)
days <- c("Mond", "Tues", "Wed", "Thu", "Fri", "Sat", "Sun")
axis(1, at = 1:length(days), lab = days)
axis(2, at = 4 * grange[2])
setwd("~/Documents/Programación/GIT/Learning-R/Computación en Estadística y Optimización/Clase 8")
set.seed(2410)
for (i in 1:10){
assign(paste0("x", i), rnorm(15, 10, 2))
}
x1
x2
saludo <- 'hola'
espacio <- ' '
reeptor <- 'jefe'
Saludo <- paste0(saludo, espacio)
Saludo
espacio <- ' '
receptor <- 'jefe'
Saludo <- paste0(Saludo, receptor)
Saludo
Saludo <- paste0(saludo, espacio, receptor)
Saludo
setwd("~/Documents/Programación/GIT/Learning-R/Computación en Estadística y Optimización/Clase 9")
et.seed(2410)
for (i in 1:10) {
assign(paste0("x", i), rnorm(15, 10, 2))
}
set.seed(2410)
for (i in 1:10) {
assign(paste0("x", i), rnorm(15, 10, 2))
}
ls(pattern = "x")
for (i in 1:10) {
pritn(summary(paste0("x", i)))
}
print(summary(paste0("x", i)))
for (i in 1:10) {
print(summary(paste0("x", i)))
}
for (i in 1:10) {
print(summary(get(paste0("x", i))))
}
rm(list = ls(pattern = 'x'))
ls()
ls()
rm(list = ls(pattern = 'x'))
ls()
for (i in 1:10) {
assign(paste0("x", i), rnorm(15, 10, 2))
}
ls(pattern = "x") # comprobamos que se han generado...
rm(list = paste0('x', 1))
for (i in 1:10){
rm(list = paste0('x', 1))
}
ls(pattern = "x") # comprobamos que se han generado...
for (i in 0:10) {
assign(paste0("x", i), rnorm(15, 10, 2))
}
ls(pattern = "x") # comprobamos que se han generado...
ls(pattern = "x") # comprobamos que se han generado...
for (i in 1:10){
rm(list = paste0('x', 1))
}
for (i in 1:10) {
assign(paste0("x", i), rnorm(15, 10, 2))
}
ls(pattern = "x") # comprobamos que se han generado...
for (i in 1:10){
rm(list = paste0('x', i))
}
for (i in 1:10){
rm(list = paste0('x', i))
}
ls(pattern = "x") # comprobamos que se han borrado...
for (i in 1:10) {
assign(paste0("x", i), rnorm(15, 10, 2))
}
ls(pattern = "x") # comprobamos que se han generado...
for (i in 1:10){
rm(list = paste0('x', i))
}
ls(pattern = "x") # comprobamos que se han borrado...
rm(x0)
ls(pattern = "x") # comprobamos que se han borrado...
datalist <- lapply(paste0("datos", 1:3, ".txt"),read.table, header = TRUE)
do.call(rbind(datalist))
datalist <- lapply(paste0("datos", 1:3, ".txt"),read.table, header = TRUE)
do.call(rbind(datalist))
datalist <- lapply(paste0("datos", 1:3, ".txt"),read.table, header = TRUE)
do.call(rbind(datalist))
setwd("~/Documents/Programación/GIT/Learning-R/Computación en Estadística y Optimización/Clase 10")
library(quantreg)    # For quantile regression function rq()
data(engel)          # The data set which will be used
help(engel)
library(data.table)
data.table(engel)
windows()
par(font = 2, font.axis = 2, font.lab = 4, las = 1)
plot(foodexp ~ income, data = engel, pch = 16, xlab = "Income",
ylab = "Food expenditure")
fit1 <- rq(foodexp ~ income, tau = 0.5, data = engel)
abline(fit1)
summary(fit1)
library(foreach)
library(doParallel)
cl <- makeCluster(2)    # create a cluster with 2 cores
registerDoParallel(cl)  # register the cluster
res <- foreach(i = 1:10000, .combine = "rbind", .packages = "quantreg") %dopar% {
# Generate a bootstrap sample
boot_dat <- engel[sample(1:nrow(engel), replace = TRUE), ]
# Fit the model
fit1 <- rq(foodexp ~ income, tau = 0.5, data = boot_dat)
# return the coefficients
fit1$coef
}
stopCluster(cl) # shut down the cluster
data.table(res)
quantile(res[, 2], p = c(.025, .975))
system.time({
res <- foreach(i = 1:10000, .combine = "rbind", .packages = "quantreg") %do% {
boot_dat <- engel[sample(1:nrow(engel), replace = TRUE), ]
fit1 <- rq(foodexp ~ income, tau = 0.5, data = boot_dat)
fit1$coef
}
})
cl <- makeCluster(2)
registerDoParallel(cl)
system.time({
res <- foreach(i = 1:10000, .combine = "rbind", .packages = "quantreg") %dopar% {
boot_dat <- engel[sample(1:nrow(engel), replace = TRUE), ]
fit1 <- rq(foodexp ~ income, tau = 0.5, data = boot_dat)
fit1$coef
}
})
stopCluster(cl)
cl <- makeCluster(4)
registerDoParallel(cl)
system.time({
res <- foreach(i = 1:10000, .combine = "rbind", .packages = "quantreg") %dopar% {
boot_dat <- engel[sample(1:nrow(engel), replace = TRUE), ]
fit1 <- rq(foodexp ~ income, tau = 0.5, data = boot_dat)
fit1$coef
}
})
stopCluster(cl)
install.packages("doParallel")
install.packages("foreach")
library(quantreg)    # For quantile regression function rq()
data(engel)          # The data set which will be used
help(engel)
library(data.table)
data.table(engel)
windows()
par(font = 2, font.axis = 2, font.lab = 4, las = 1)
plot(foodexp ~ income, data = engel, pch = 16, xlab = "Income",
ylab = "Food expenditure")
fit1 <- rq(foodexp ~ income, tau = 0.5, data = engel)
abline(fit1)
summary(fit1)
library(foreach)
library(doParallel)
cl <- makeCluster(2)    # create a cluster with 2 cores
registerDoParallel(cl)  # register the cluster
res <- foreach(i = 1:10000, .combine = "rbind", .packages = "quantreg") %dopar% {
# Generate a bootstrap sample
boot_dat <- engel[sample(1:nrow(engel), replace = TRUE), ]
# Fit the model
fit1 <- rq(foodexp ~ income, tau = 0.5, data = boot_dat)
# return the coefficients
fit1$coef
}
stopCluster(cl) # shut down the cluster
data.table(res)
quantile(res[, 2], p = c(.025, .975))
system.time({
res <- foreach(i = 1:10000, .combine = "rbind", .packages = "quantreg") %do% {
boot_dat <- engel[sample(1:nrow(engel), replace = TRUE), ]
fit1 <- rq(foodexp ~ income, tau = 0.5, data = boot_dat)
fit1$coef
}
})
cl <- makeCluster(2)
registerDoParallel(cl)
system.time({
res <- foreach(i = 1:10000, .combine = "rbind", .packages = "quantreg") %dopar% {
boot_dat <- engel[sample(1:nrow(engel), replace = TRUE), ]
fit1 <- rq(foodexp ~ income, tau = 0.5, data = boot_dat)
fit1$coef
}
})
stopCluster(cl)
cl <- makeCluster(4)
registerDoParallel(cl)
system.time({
res <- foreach(i = 1:10000, .combine = "rbind", .packages = "quantreg") %dopar% {
boot_dat <- engel[sample(1:nrow(engel), replace = TRUE), ]
fit1 <- rq(foodexp ~ income, tau = 0.5, data = boot_dat)
fit1$coef
}
})
stopCluster(cl)
quartz()
quartz()
system.time({
res <- foreach(i = 1:10000, .combine = "rbind", .packages = "quantreg") %do% {
boot_dat <- engel[sample(1:nrow(engel), replace = TRUE), ]
fit1 <- rq(foodexp ~ income, tau = 0.5, data = boot_dat)
fit1$coef
}
})
cl <- makeCluster(2)
registerDoParallel(cl)
system.time({
res <- foreach(i = 1:10000, .combine = "rbind", .packages = "quantreg") %dopar% {
boot_dat <- engel[sample(1:nrow(engel), replace = TRUE), ]
fit1 <- rq(foodexp ~ income, tau = 0.5, data = boot_dat)
fit1$coef
}
})
stopCluster(cl)
# (c) 4 cores
cl <- makeCluster(4)
registerDoParallel(cl)
system.time({
res <- foreach(i = 1:10000, .combine = "rbind", .packages = "quantreg") %dopar% {
boot_dat <- engel[sample(1:nrow(engel), replace = TRUE), ]
fit1 <- rq(foodexp ~ income, tau = 0.5, data = boot_dat)
fit1$coef
}
})
stopCluster(cl)
load("Immunology.RData")
library(Hmisc)
stopifnot(is.numeric(x))
varML <- function(x)
{
stopifnot(is.numeric(x))
}
var(immuno$age)
varML(immuno$age)
varML(immuno$age)
stopifnot(is.numeric(x))
varML <- function(x)
{
stopifnot(is.numeric(x))
}
var(immuno$age)
varML(immuno$age)
file.show("Rfunctions_vars1a4.R")
source("Rfunctions_vars1a4.R")
vars1(immuno$age)
vars2(immuno$age)
val <- var(x, na.rm = TRUE)
n <- sum(complete.cases(x)) # sumando los casos concretos no tendremos en cuenta los missisgs
varML <- function(x)
{
stopifnot(is.numeric(x))
# calculamos la varianza sin considerer los missings
val <- var(x, na.rm = TRUE)
# a partir de este calculamos el estimador de mácima verosimilitud de la varianza
n <- sum(complete.cases(x)) # sumando los casos concretos no tendremos en cuenta los missisgs
}
return(val)
varML <- function(x)
{
stopifnot(is.numeric(x))
# calculamos la varianza sin considerer los missings
val <- var(x, na.rm = TRUE)
# a partir de este calculamos el estimador de mácima verosimilitud de la varianza
n <- sum(complete.cases(x)) # sumando los casos concretos no tendremos en cuenta los missisgs
val <- val * (n - 1) / n
return(val)
}
var(immuno$age)
varML(immuno$age)
varML(immuno$group)
file.show("Funciones vars.R")
source("Funciones vars.R")
vars1(immuno$age)
vars2(immuno$age)
vars3(immuno$age)
vars4(immuno$age)
cso()
fourGraphs <- function(x, clr = 2, lwi = 2, ...)
{
if (!is.numeric(x))
stop("The argument must be a numeric vector")
windows()
par(mfrow = c(2, 2), ...)
hist(x)
boxplot(x, main = paste("Boxplot of the vector", deparse(substitute(x))),
col = clr)
iqd <- summary(x)[5] - summary(x)[2]
plot(density(x, width = 2 * iqd), main = "Kernel estimate of the density",
xlab = "x", ylab = "", type = "l", lwd = lwi)
qqnorm(x)
qqline(x, col = clr, lwd = lwi)
}
file.show("Función fourGraphs.R")
source("Función fourGraphs.R")
x <- rnorm(1000)
y <- rchisq(1000, 5)
fourGraphs(x)
fourGraphs(x, "tomato", 3)
fourGraphs(y, lwi = 5)
graphics.off()
source("Función fourGraphs.R")
x <- rnorm(1000)
y <- rchisq(1000, 5)
fourGraphs(x)
fourGraphs(x, "tomato", 3)
fourGraphs(y, lwi = 5)
graphics.off()
Función
Función
fourGraphs(x)
fourGraphs(x, "tomato", 3)
fourGraphs(y, lwi = 5)
fourGraphs(immuno$group)
fourGraphs(y, lwi= 5, font.lab = 4, font.axis = 2)
