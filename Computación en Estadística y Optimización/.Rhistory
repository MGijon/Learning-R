suma()
suma()
suma(3, 2)
suma = function(x = 4, y = 3){
# primera función, quiero saber cómo llamarlas por consola
return(x + y)
}
suma(x, y)
suma()
suma(3, 132)
suma()
clear
x <- 1:10
y <- 1:10
plot(e, y)
plot(x, y)
4 * x
x * y
plot(x, y)
x <- x*y*51
plot(x, y)
1:4:0.1
1:3
1:0.1:10
library(zoo)
equipoLocal=zoo(nMedioGolesLocal, order.by=fechasLiga)
zoo?
clearPushBack()
demo("graphics")
schico <- diamonds[sample(nrow(diamonds), 100), ]
help("read.table")
read.table?
ccals
cls
data("iris")
dim(iris)
iris
levels(dataset$Species)
levels(iris$Species)
percentage <- prop.table(table(iris$Species)) * 100
cbind(freq = table(iris$Species), percentage = percentage)
summary(iris)
y <- iris[, 5]
boxplot(x[, i], main = names(iris)[i])
data("iris")
dim(iris)   # filas, columnas
for i in 1:4{
boxplot(x[, i], main = names(iris)[i])
}
x <- iris[, 1:4]
x
par(mfrow = c(1, 4))
for i in 1:4{
boxplot(x[, i], main = names(iris)[i])
}
boxplot(x[,i], main = names(iris)[i])
{
boxplot(x[,i], main = names(iris)[i])
}
ce,ar
install.packages("Hmisc")
library(Hsmisc)
library(Hmisc)
install.packages("Openxlex")
summary(iris)
sumary([1:50, ])
sumary(irirs[1:50, ])
sumary(iris[1:50, ])
summary(iris[1:50, ])
summary(iris[51:100,])
summary(iris[101:,])
summary(iris[101:150,])
naciento <- 04-04-1994
naciemiento
hoy <- 26-09-2017
hoy - nacimiento
hoy - naciento
clear
nacimiento <- as.Date("1994-04-04")
hoy <- as.Date("2017-09-26")
hoy - nacimiento
1994 + 70
muerte <- as.Date("2064-04-04")
muerte-hoy
16992 / 365.25
weekdays(nacimiento)
weekdays(muerte)
weekdays(hoy)
month(muerte)
months(muerte)
months(hoy)
months(nacimiento)
Sys.getlocale()
Sys.getlocale("LC_ALL")
Sys.getlocale("LC_ALL", "esp")
Sys.setlocale("LC_ALL", "esp")
Sys.setlocale("LC_ALL", "vas")
Sys.setlocale("LC_ALL", "Basque")
sys.setlocale("LC_ALL", "Basque")
Sys.setlocale("LC_ALL", "Basque")
which(is.na(Iris))  # si el dato es missing True, nos
Iris = data("Iris")
Iris = data("iris")
Iris = data("iris")
which(is.na(Iris))  # si el dato es missing True, nos
which(is.na(Iris), arr.ind = TRUE)
boxplot(mgp~cyl, Iris, main = 'primer boxplot con R', xlab = "eje x", ylab = "ylab")
boxplot(mgp~cyl, Iris, main = "primer boxplot con R", xlab = "eje x", ylab = "ylab")
install.packages(""datasets.load"")
install.packages(datasets.load")
mclwncsa
c kejaf aca
-sda
cnnkd
mankcsa
cknasc a
as a
nkanc
alcpmalksmclac+
install.packages("datasets")
install.packages("datasets")
load("iris")
data("iris")
iris
x <- iris[,1:2]
x
x <- iris[,1]
x
len(x)
dim(x)
summary(x)
x <- c(1:100)
y <- c(1:2:200)
y <- c(1:200:2)
y <- 2*x
plot(x, y)
xlabel("ejex")
plot(x, y, xlabel= "ejeX")
X = iris[,1]
X
length()
length(C)
length(X)
Y <- c(1:150)
length(Y)
plot(Y, X)
par(mfrow = x(1;4))
par(mfrow = x(1:4))
par(mfrow = c(1:4))
graphics.off()
par(mfrow = c(1:4))
par(mfrow = c(1, 4))
for (i in 1:4){}
for (i in 1:4){}
for (i in 1:4){plot(Y, iris[, i])}
summary(data("iris"))
Iris <- data("iris")
summary(Iris)
Iris_setosa = iris[iris == "setosa"]
Iris_setosa
data("iris")
Iris_setosa = iris[iris == "setosa"]
Iris_setosa
Iris_setosa[1:20, 1]
Iris_setosa[1:50, 1]
plot(vector)
vector
plot(p)
p <- c(1:20)
plot(p)
plot(p, type = "0", col = "blue")     # blue points overlayed by a line
plot(p, type = "o", col = "blue")     # blue points overlayed by a line
p <- c(1:20)
title("ponints", col.main = "red", font.main = 4)
p <- c(2, 3, 4.3, 2, 4, 3, 5, 4)
plot(p)         # just points
title("points", col.main = "red", font.main = 4)
plot(p, type = "o", col = "blue")     # blue points overlayed by a line
title("points", col.main = "red", font.main = 4)
title(main = "Money spend during a week", col.main = "red", font = 4)
graphics.off() # close all the graphics
dinner_spend <- c(10, 10, 10, 15.5, 10, 13, 17)
plot(lunch_spend, type = "o", col = "blue", ylimit = c(0, 6))     # using a y axis in a range (0, 6)
lines(dinner_spend, type = "o", pch = 22, lty = 2, col = "red") # red dashed line and square points
plot(lunch_spend, type = "o", col = "blue", ylim = c(0, 6))     # using a y axis in a range (0, 6)
lunch_spend <- c(10.99, 9, 6.1, 9.50, 6.30, 12, 18)
plot(lunch_spend, type = "o", col = "blue", ylim = c(0, 6))     # using a y axis in a range (0, 6)
plot(lunch_spend, type = "o", col = "blue")
plot(lunch_spend, type = "o", col = "blue", ylim = c(1, 12))
plot(lunch_spend, type = "o", col = "blue")     # using a y axis in a range (0, 6)
c = 1:10
c
mac(c)
max(c)
plot(lunch_spend, type = "o", col = "blue", ylim = c(1, max(lunch_spend) + 1))
lines(dinner_spend, type = "o", pch = 22, lty = 2, col = "red")
title("Money spend in food", col.main = "red", font.main = 4)
length((c))
graphics.off()
plot(lunch_spend, type = "o", col = "blue")     # using a y axis in a range (0, 6)
title("Lunch spend during a week", col.main = "red", font.main = 4)
plot(X)         # just points
plot(X)         # just points
X <- c(10.99, 9, 6.1, 9.50, 6.30, 12, 18)
plot(X)         # just points
plot(X, type = "o", col = "blue")     # blue points overlayed by a line, just that
"testeando los comentarios multiínea en R"
"coment"
/* comentario multilínea en R */
''
'''
aknda
oaneac
wevoan
x <- matrix(1:6, nrow = 2)
y <- 2*x
matplot(x, y) # just matplot, with no parameters
x <- matrix(1:45, nrow = 5)
y <- 2*x
matplot(x, y) # just matplot, with no parameters
matplot(x, y, type = 'o')
matplot(x, y, type = 'o')
matplot(x, y) # just matplot, with no parameters
matplot(x, y, type = 'o')
matplot(x, y, type = 'o', col = "black")
matplot(x, y, type = 'o', col = "black", lend = "p")
matplot(x, y, type = 'o', col = "black")
matplot(x, y, type = 'o', col = "black", lend = "p")
matplot(x, y, type = 'o', col = "black")
lends <- c("round","butt","square")
matplot(x, y, type = 'o', col = "black", lend = lends)
lends <- c("round","butt","square")
matplot(x, y, type = 'o', col = "black", lend = lends)
matplot(x, y, type = 'c', col = "black", lend = lends)
lends <- c("round","butt","square")
matplot(x, y, type = 'c', col = "black", lend = lends)
y <- 2*x
matplot(x, y) # just matplot, with no parameters
matplot(x, y, type = 'o', col = "black")
lends <- c("round","butt","square")
matplot(x, y, type = 'c', col = "black", lend = lends)
matplot(x, y, type = 'c', col = "black", lend = lends)
matplot(x, y, type = 'c', col = "black")
matplot(x, y, type = 'c', col = "black")
matplot(x, y, type = 'l', col = "black")
matplot(x, y, type = 'l', col = c("black", "red"))
data("iris")
matplot(iris)
summary(iris)
matplot(iris$Sepal.Length, main = "Sepal Length")
matplot(iris$Sepal.Length, main = "Sepal Length", ylab = "", sub = "of all the set")
matplot(iris[1:50, ]$Sepal.Length)
matplot(iris[1:50, ]$Sepal.Length, main = "Setosa Sepal Length", ylab = "", sub ="just for Setosa"
matplot(iris$Sepal.Length, main = "Sepal Length", ylab = "", sub = "of all the set")
matplot(iris[1:50, ]$Sepal.Length, main = "Setosa Sepal Length", ylab = "", sub ="just for Setosa"
matplot(iris[1:50, ]$Sepal.Length, main = "Setosa Sepal Length", ylab = "", sub ="just for Setosa")
matplot(iris$Sepal.Length, main = "Sepal Length", ylab = "", sub = "of all the set")
matplot(iris[1:50, ]$Sepal.Length, main = "Setosa Sepal Length", ylab = "", sub ="just for Setosa")
matplot(iris[1:50, ]$Sepal.Length, style = "o", main = "Setosa Sepal Length", ylab = "", sub ="just for Setosa")
matplot(iris[1:50, ]$Sepal.Length, style = "o", main = "Setosa Sepal Length", ylab = "", sub ="just for Setosa")
matplot(iris[1:50, ]$Sepal.Length, type = "o", main = "Setosa Sepal Length", ylab = "", sub ="just for Setosa")
matplot(iris[1:50, ]$Sepal.Length, type = "p", main = "Setosa Sepal Length", ylab = "", sub ="p type")
matplot(iris[1:50, ]$Sepal.Length, type = "n", main = "Setosa Sepal Length", ylab = "", sub ="o type")
matplot(iris[1:50, ]$Sepal.Length, type = "b", main = "Setosa Sepal Length", ylab = "", sub ="o type")
matplot(iris[1:50, ]$Sepal.Length, type = "b", main = "Setosa Sepal Length", ylab = "", sub ="b type")
matplot(iris[1:50, ]$Sepal.Length, type = "o", main = "Setosa Sepal Length", ylab = "", sub ="o type", lend = "round")
matplot(iris[1:50, ]$Sepal.Length, type = "o", main = "Setosa Sepal Length", ylab = "", sub ="o type", lend = "round")
matplot(iris[1:50, ]$Sepal.Length, type = "o", main = "Setosa Sepal Length", ylab = "", sub ="o type, lend round", lend = "round")
matplot(iris[1:50, ]$Sepal.Length, type = "o", main = "Setosa Sepal Length", ylab = "", sub ="o type, lend square", lend = "square")
matplot(iris[1:50, ]$Sepal.Length, type = "o", main = "Setosa Sepal Length", ylab = "", sub ="o type, lend square", lend = "square")
matplot(iris[1:50, ]$Sepal.Length, type = "c", main = "Setosa Sepal Length", ylab = "", sub ="c type, lend square", lend = "square")
matplot(iris[1:50, ]$Sepal.Length, type = "c", main = "Setosa Sepal Length", ylab = "", sub ="c type, lend butt", lend = "butt")
plot()
boxplot(x)
x <- c(2, 32, 3, 24, 2, 34, 2, 423, 2, 4, 2, 32, 23, 2, 342)
boxplot(x)
x <- c(2, 4, 2, 3, 4, 5, 7, 4)
boxplot(x)
boxplot(x, horizontal = TRUE)
boxplot(x, varwidth = TRUE) #  make box plot widths proportional to the square root of the sample sizes
boxplot(x, horizontal = TRUE) # make it horizontal
boxplot(x, varwidth = TRUE) #  make box plot widths proportional to the square root of the sample sizes
boxplot(x)
boxplot(x, varwidth = TRUE) #  make box plot widths proportional to the square root of the sample sizes
boxplot(x, horizontal = TRUE) # make it horizontal
boxplot(iris)
boxplot(iris$Sepal.Length, main = "Sepal Length", sub = "all the flowers")
boxplot(iris[1:50, ]$Sepal.Length, main = "Sepal Length", sub = "only Setosa")
boxplot(iris[1:50, ]$Sepal.Length, main = "Sepal Length", sub = "only Setosa")
boxplot(iris$Sepal.Length, main = "Sepal Length", sub = "all the flowers")
boxplot(iris[1:50, ]$Sepal.Length, main = "Sepal Length", sub = "only Setosa")
par(nfrow = c(1, 3))
boxplot(iris[1:50, ]$Sepal.Length, main = "Sepal Length", sub = "only Setosa")
boxplot(iris[51:100, ]$Sepal.Length, main = "Sepal Length", sub = "only Versicolor")
par(mfrow = c(1, 3))
boxplot(iris[1:50, ]$Sepal.Length, main = "Sepal Length", sub = "only Setosa")
boxplot(iris[51:100, ]$Sepal.Length, main = "Sepal Length", sub = "only Versicolor")
boxplot(iris[101:150, ]$Sepal.Length, main = "Sepal Length", sub = "only Virginica")
summary(iris)
boxplot(iris$Petal.Length, main = "Petal Length", sub = "all the flowers")
par()
boxplot(iris$Petal.Length, main = "Petal Length", sub = "all the flowers")
boxplot(iris[1:50, ]$Sepal.Length, main = "Sepal Length", sub = "only Setosa")
boxplot(iris[51:100, ]$Sepal.Length, main = "Sepal Length", sub = "only Versicolor")
boxplot(iris[101:150, ]$Sepal.Length, main = "Sepal Length", sub = "only Virginica")
par()
boxplot(iris$Petal.Length, main = "Petal Length", sub = "all the flowers")
par(mfrow=c(1,1))
boxplot(iris$Petal.Length, main = "Petal Length", sub = "all the flowers")
boxplot(iris$Petal.Length, main = "Petal Length", sub = "all the flowers", col = "red")
boxplot(iris$Sepal.Length, main = "Sepal Length", sub = "all the flowers")
boxplot(iris[1:50, ]$Sepal.Length, main = "Sepal Length", sub = "only Setosa")
par(mfrow = c(1, 3))
boxplot(iris[1:50, ]$Sepal.Length, main = "Sepal Length", sub = "only Setosa")
boxplot(iris[51:100, ]$Sepal.Length, main = "Sepal Length", sub = "only Versicolor")
boxplot(iris[101:150, ]$Sepal.Length, main = "Sepal Length", sub = "only Virginica")
par(mfrow=c(1,1))     # ugly way to reset 'par'
boxplot(iris$Petal.Length, main = "Petal Length", sub = "all the flowers", col = "red")
g_range == range(0, max(Y))   # returns TRUE TRUE
plot(lunch_spend, type = "o", col = "blue", ylim = g_range, axes = FALSE, ann = FALSE)
lines(dinner_spend, type = "o", pch = 22, lty = 2, col = "red")
title("Money spend in food", col.main = "red", font.main = 4)
days <- c("Mond", "Tues", "Wed", "Thu", "Fri", "Sat", "Sun")
axis(1, at = 1:length(days), lab = days)
axis(2, at = 4 * grange[2])
ls()
clear
switch(2, "red", "black", "green", "blue", "brown")
switch(1, "red", "black", "green", "blue", "brown")
switch(0, "red", "black", "green", "blue", "brown")
switch(16, "red", "black", "green", "blue", "brown")
switch("color","color" = "red", "shape" = "square", "length" = "5")
switch("shape","color" = "red", "shape" = "square", "length" = "5")
setwd("~/Documents/Programación/GIT/Learning-R/Computación en Estadística y Optimización")
set.seed(1609)
edades <- rpois(20, 40)
alturas <- round(rnorm(20, 175, 10), 2)
edades
alturas
minimo_alutas <- which(altura == min(alturas))
edad[minimo_alutas]
minimo_alutas <- which(alturas == min(alturas))
edad[minimo_alutas]
minimo_alutas <- which(alturas == min(alturas))
edades[minimo_alutas]
min_alturas <- which.min(alturas)
min_alturas
min_alturas
edades[min_alturas]
edades[min_alturas]
sum( edades $in$ 30:40)
sum( edades `$in$` 30:40)
sum( edades `$in$` 30:40)
sum(edades in 30:40)
sum(edades in 30:40)
edades in 30:40
edades in 30:40
edades %in% 30:40
sum(edades %in% 30:40)
carrera <- factor(sample( c("Matemáticas", "Informática", "Periodismo", "Medicina"), 20, replace = T))
carrera
median(edades[carrera $in$ c("Periodismo", "Medicina")])
median(edades[carrera %in% c("Periodismo", "Medicina")])
median(edades[as.numeric(Carrera) > 27])
median(edades[as.numeric(carrera) > 27])
carrera <- factor(sample( c("Estadística", "Física", "Biología", "Medicina"), 20, replace = T))
carrera
median(edades[carrera %in% c("Periodismo", "Medicina")])
median(edades[as.numeric(carrera) > 27])
median(edades[carrera %in% c("Física", "Medicina")])
median(edades[as.numeric(carrera) > 27])
median(edades[carrera %in% c("Física", "Medicina")])
median(edades[as.numeric(carrera) > 2])
carrera
median(edades[carrera %in% c("Física", "Medicina")])
median(edades[as.numeric(carrera) > 2])
levels(carrera)
levels(carrera)[2:3]
levels(carrera)[2:3] <- c("Stats", "Phys")
datframe <- data.frame(Edad = edades, Altura = alturas, Carrera = carrera)
save(datframe, file = "Test0.RData")
state.x77
class(state.x77)
ncol(state.x77)
states77 <- data.frame(state.x77)
head(states77)
states77$Region <- state.region
head(states77)
states77 <- data.frame(state.x77, Region = state.region)
states77$HS.Grad <- states77$Frost <- NULL
states77 <- subset(states77, select = -c(HS.Grad, Frost))
head(states77, 4)
names(states77) <- substr(tolower(names(states77)), 1, 4)
names(states77)
round(cor(states77[c("inco", "illi", "life"), use = "c"]), 3)
round(cor(states77[c("inco", "illi", "life"), use = "p"]), 3)
round(cor(states77[c("inco", "illi", "life"], use = "c"]), 3)
# Using pairwise complete observations
round(cor(states77[c("inco", "illi", "life"], use = "p"]), 3)
round(cor(states77[c("inco", "illi", "life")], use = "c"]), 3)
round(cor(states77[c("inco", "illi", "life")], use = "p"), 3)
round(cor(states77[c("inco", "illi", "life")], use = "c"]), 3)
round(cor(states77[c("inco", "illi", "life")], use = "p"), 3)
tap <- with(states77, tapply(inco, regi, mean))
which.max(tap)
max(tap)
tap[which.max(tap)]
round(cor(states77[c("inco", "illi", "life")], use = "c"]), 3)
round(cor(states77[c("inco", "illi", "life")], use = "p"), 3)
tap <- with(states77, tapply(inco, regi, mean))
round(cor(states77[c("inco", "illi", "life")], use = "c"), 3)
round(cor(states77[c("inco", "illi", "life")], use = "p"), 3)
tap <- with(states77, tapply(inco, regi, mean))
which.max(tap)
max(tap)
states77[c("Alabama", "Wyoming"), "life"] <- NA
round(cor(states77[c("inco", "illi", "life")], use = "c"), 3)
round(cor(states77[c("inco", "illi", "life")], use = "p"), 3)
tap <- with(states77, tapply(inco, regi, mean))
which.max(tap)
max(tap)
tap[which.max(tap)]
tap[which.max(tap)]
tap[which.max(tap)]
tap[which.max(tap)]
tap[which.max(tap)]
tap[which.max(tap)]
max(alturas)
x <- c(1:20)
y <- rpoirs(20,0)
x <- c(1:20)
y <- rpois(20,0)
plot(x, y)
x <- c(1:100)
y <- rpois(100,0)
plot(x, y)
x <- c(1:100)
y <- rpois(100,10)
plot(x, y)
y <- rpois(100,0, 1)
plot(x, y)
x <- c(1:100)
y <- rnorm(100,0, 1)
plot(x, y)
y <- rnorm(100,0, 1)
plot(x, y)
x <- c(1:100)
y <- rnorm(100,0, 1)
plot(y, type = "h")
plot(sort(y), type = "h")
cosas <- c("Perro", "gato", "dog", "cat", "Informático")
which("Informático", cosas)
which("Informático" == cosas)
cosas[0]
cosas[1]
cosas[which(cosas == "Informático")]
cosas[which("Informático" == cosas)]
numeros <- c(1:50)
sample(numeros)
which.min(numeros)
which.max(sample(numeros))
which.min(sample(numeros))
muestra <- sample(numeros)    # randomize a vector
which.min(muestra)
which.max(muestra)
muestra[which.max(muestra)] == max(muestra)
muestra[which.min(muestra)] == min(muestra)
letras <- c("A", "B")
letras
sopa <- sample(letras)
sopa
sopa <- sample(letras, 4)
sopa <- sample(letras, 4, replace = TRUE)
sopa
sopa <- factor(sopa)
sopa
levels(sopa)
num <- round(rnorm(20, 0, 1), 2)
median(num)
num <- round(rnorm(200, 0, 1), 2)
median(num)
marco <- data.frame(Letras <- c("A", "B", "C", "D"), Numeros <- c(1:4))
marco
marco <- data.frame(Letras = c("A", "B", "C", "D"), Numeros = c(1:4))
marco
class(state.x77)
ncol(state.x77)
states77 <- data.frame(state.x77) # convertimos la matriz en data.frame
states77 <- data.frame(state.x77) # convertimos la matriz en data.frame
states77$Region <- state.region   #
head(states77)
states77 <- data.frame(state.x77, Region = state.region)
states77 <- data.frame(state.x77) # convertimos la matriz en data.frame
states77$Region <- state.region   #
head(states77)
states77 <- data.frame(state.x77) # convertimos la matriz en data.frame
states77
states77$Region <- state.region   # añadimos una nueva variable con el nombre Region
states77
head(states77)
C <- c(1:20)
C
c <- c(1:10)
C <- subset(C, select =-c)
C <- subset(C, select =-c)
C <- subset(C, select = - c)
C <- subset(C, select = - 1:10)
c <- c(1:10)
C <- subset(C, select = - 1:10)
names(states77) <- substr(tolower(names(states77)), 1, 4)
C <- C - c
C
