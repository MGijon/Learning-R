length(ls())
rm(list = ls())
ls()
load("Datos.Rdata")
ls()
length(ls())
rownames(states77) <- states77$stat    # cambiamos los identificadores de fila
rownames(states77) <- states77$stat    # cambiamos los identificadores de fila
states77$stat <- NULL                  # borramos 'stat'
setwd("~/Documents/Programación/GIT/Learning-R/Computación en Estadística y Optimización/Clase 6 (primer examen)")
load("Datos.Rdata")
ls()
length(ls())
rownames(states77) <- states77$stat    # cambiamos los identificadores de fila
states77$stat <- NULL                  # borramos 'stat'
head(states77)                         # imprimimos la cabezera para asegurarnos
states77$pop <- as.numeric(states77$pop)
states77$illi <- as.numeric(states77$illi)
str(states77)                           # Nos aseguramos de la conversión
summary(states77)
setwd("~/Documents/Programación/GIT/Learning-R/Computación en Estadística y Optimización/Preración segundo examen")
rm(list = ls())
ls()
load("Datos.RData")
ls()
length(ls())
head(states77, 5)
type(states77)
class(states77)
summary(states77 )
states77
head(states77)
states77$pop[which( !is.numeric(states77$pop) )]
states77$inco[which( !is.numeric(states77$inco) )]
states77$inco[which( !is.numeric(states77$inco) )]     # numeric(0)
states77$illi[which( !is.numeric(states77$illi) )]
states77$lifex[which( !is.numeric(states77$lifex) )]
states77$hsg[which( !is.numeric(states77$hsg) )]
states77$red[which( !is.numeric(states77$reg) )]
setwd("~/Documents/Programación/GIT/Learning-R/Computación en Estadística y Optimización/Preración segundo examen")
load("Datos.RData")
ls()
length(ls())
head(states77, 5)
class(states77)
summary(states77 )
states77
srt(states77)
states77
states77[!is.numeric(states77)]
states77[is.numeric(states77)]
is.numeric("*")
is.numeric("--")
head(states77)
statates77[states77 == "Alabama"]
states77[states77 == "Alabama"]
str(states77)
names(str)
names(states77)
colnames(states77)
names(states77) == colnames(states77)
rownames(states77)
dim(states77)
dim(states77)[1] == nrow(states77)
dim(states77)[2] == ncol(states77) == length(states77)
dim(states77)[2] == ncol(states77)
ncol(states77) == length(states77)
for n in names(states77){
print(!is.numeric(n))
}
for (n in names(states77)){
print(!is.numeric(n))
}
for(n in names(states77)){
for (i in n){
print(!is.numeric(n))
}
}
print(!is.numeric(i))
for (n in names(states77)){
for (i in n){
print(!is.numeric(i))
}
}
.Primitive("names")
for (n in names(states77)){
for (i in n){
print(!is.numeric(i))
}
}
pop[0]
states77$pop[1:50]
copia_nombres <- names(states77)
for (name in names(states77)){
copia_nombres[name] <- paste0("states77$", name)
}
copia_nombres
}
for (name in names(states77)){
copia_nombres[name] <- paste0("states77$", name)
}
copia_nombres
copia_nombres
copia_nombres <- names(states77)
copia_nombres
for (name in names(states77)){
copia_nombres[name] <- paste0("states77$", name)
}
copia_nombres
length(copia_nombres)
copia_nombres <- names(states77)
copia_nombres
length(copia_nombres)
copia_nombres[name] = paste0("states77$", name)
for (name in names(states77)){
copia_nombres[name] = paste0("states77$", name)
}
copia_nombres
copia_nombres <- names(states77)
copia_nombres
length(copia_nombres)
for (name in names(states77)){
copia_nombres[name] = paste0("states77$", name)
}
copia_nombres
length(copia_nombres)
for (name in names(states77)){
copia_nombres[name]
}
length(copia_nombres)
for (name in names(states77)){
print(copia_nombres[name])
}
for (name in names(states77)){
copia_nombres[name] = paste0("states77$", name)
}
head(states77)
copia_nombres <- names(states77)
copia_nombres
length(copia_nombres)
for (name in names(states77)){
print(copia_nombres[name])
}
copia_nombres <- names(states77)
copia_nombres
length(copia_nombres)
for (name in names(states77)){
print(copia_nombres[name])
}
for (name in names(states77)){
copia_nombres[name] = paste0("states77$", name)
}
copia_nombres
length(copia_nombres)
for (n in 1:ncol(states77)){
if (!is.numeric(states77[,n])) print(states77[,n])
}
names(states77)                           # printa los nombres de las variables
colnames(states77)                        # mismo resultado que en el caso anterior
str(states77)
states77$pop <-  as.numeric(states77)
states77$pop <- as.numeric(states77$pop)
states77$pop <- as.numeric(states77$illi)
for (n in 3:(ncol(states77)-1)){
if (!is.numeric(states77[,n])) print(states77[,n])
}
str(states77)
load("Datos.RData")
ls()
length(ls())
head(states77, 5)
class(states77)
str(states77)
summary(states77 )
names(states77)                           # printa los nombres de las variables
colnames(states77)                        # mismo resultado que en el caso anterior
names(states77) == colnames(states77)
rownames(states77)                        # nombres de las filas, en este caso y por ahora solamennte números
dim(states77)                             # 50 filas y 7 columnas
dim(states77)[1] == nrow(states77)        # otra forma de obtener el número de filas
dim(states77)[2] == ncol(states77)        # dos nuevas formas de obtener el número de columnas
ncol(states77) == length(states77)
states77$pop[1:50]
states77
head(states77)
for (n in 1:ncol(states77)){
if (!is.numeric(states77[,n])) print(states77[,n])
}
str(states77)
for (n in 1:ncol(states77)){
if (!is.numeric(states77[,n])) print(states77[,n])
}
str(states77)
states77$pop <- as.numeric(states77$pop)
states77$illi <- as.numeric(states77$illi)
str(states77)
for (n in 3:(ncol(states77)-1)){
if (!is.numeric(states77[,n])) print(states77[,n])
}
for (n in 3:(ncol(states77)-1)){
if (!is.numeric(states77[,n])) print(states77[,n])
}
load("Datos.RData")
str(states77)
if (!is.na(states77[,n])) print(states77[,n])
str(states77)
for (n in 3:(ncol(states77)-1)){
if (!is.na(states77[,n])) print(states77[,n])
}
str(states77)
for (n in 3:(ncol(states77)-1)){
for (i in 1:dim(states77)[1]){
if (!is.na(states77[i,n])) print(states77[i,n])
}
}
for (n in 3:(ncol(states77)-1)){
for (i in 1:dim(states77)[1]){
if (is.na(states77[i,n])) print(states77[i,n])
}
}
is.numeric(3)
is.numeric("3")
is.numeric(as.numeric("3")
is.numeric(as.numeric("3"))
is.numeric(as.numeric("3"))
is.numeric(as.numeric("*"))
is.numeric(as.numeric("*"))
print(is.numeric(as.numeric("*")))
summary(states77)
summary(states77)
summary(states77)
states77$pop <- as.numeric(states77$pop)
states77$illi <- as.numeric(states77$illi)
summary(states77)
for (n in 3:(ncol(states77)-1)){
for (i in 1:dim(states77)[1]){
if (is.na(states77[i,n])) print(states77[i,n])
}
}
for (n in 2:(ncol(states77)-1)){
for (i in 1:dim(states77)[1]){
if (is.na(states77[i,n])) print(states77[i,n])
}
}
total <- 0
for (n in 2:(ncol(states77)-1)){
for (i in 1:dim(states77)[1]){
if (is.na(states77[i,n])) total <- total +1
}
}
print(total)
for (n in 1:ncol(states77)){
if (!is.numeric(states77[,n])) print(states77[,n])
}
str(states77)
summary(states77)
rm(list = ls())
ls()                                      # Nos aseguramos de que está vacía
load("Datos.RData")                       # En este caso los cargamos de un fichero situado en el directorio de trabajo
ls()                                      # Comprobamos que se han cargado correctamente
length(ls())
head(states77, 5)                         # Imprimimos la cabecera continente de las 5 primeras filas
class(states77)
str(states77)
summary(states77 )
names(states77)                           # Imprimimos los nombres de las variables
colnames(states77)                        # Mismo resultado que en el caso anterior
names(states77) == colnames(states77)
rownames(states77)                        # Nombras de las filas, en este caso y por ahora solamennte números
dim(states77)                             # 50 filas y 7 columnas
dim(states77)[1] == nrow(states77)        # Otra forma de obtener el número de filas
dim(states77)[2] == ncol(states77)        # Doss nuevas formas de obtener el número de columnas
ncol(states77) == length(states77)
str(states77)                             # Las variables 'pop' e 'illi' son del tipo 'chr' cuano nos convendía que fueran numéricas, las convertiremos
states77$pop <- as.numeric(states77$pop)
states77$illi <- as.numeric(states77$illi)
summary(states77)
summary(states77)
function (file, envir = parent.frame(), verbose = FALSE)
load("Datos.RData")                       # En este caso los cargamos de un fichero situado en el directorio de trabajo
ls()                                      # Comprobamos que se han cargado correctamente
length(ls())
head(states77, 5)                         # Imprimimos la cabecera continente de las 5 primeras filas
class(states77)
str(states77)
summary(states77 )
names(states77)                           # Imprimimos los nombres de las variables
colnames(states77)                        # Mismo resultado que en el caso anterior
names(states77) == colnames(states77)
rownames(states77)                        # Nombras de las filas, en este caso y por ahora solamennte números
dim(states77)                             # 50 filas y 7 columnas
dim(states77)[1] == nrow(states77)        # Otra forma de obtener el número de filas
dim(states77)[2] == ncol(states77)        # Doss nuevas formas de obtener el número de columnas
ncol(states77) == length(states77)
str(states77)                             # Las variables 'pop' e 'illi' son del tipo 'chr' cuano nos convendía que fueran numéricas, las convertiremos
summary(states77)
rm(list = ls())
ls()                                      # Nos aseguramos de que está vacía
load("Datos.RData")                       # En este caso los cargamos de un fichero situado en el directorio de trabajo
ls()                                      # Comprobamos que se han cargado correctamente
length(ls())
head(states77, 5)                         # Imprimimos la cabecera continente de las 5 primeras filas
class(states77)
str(states77)
summary(states77 )
summary(states77)
summary(states77)                         # Observemos que el número de NA's es 2 en total, solamente se encuentran en la variable 'inco'
states77$pop <- as.numeric(states77$pop)
str(states77)
states77$pop <- as.numeric(states77$pop)
states77$illi <- as.numeric(states77$illi)
str(states77)
total <- 0                                # Contamos el número total de NA's en el data frame usando un bucle que lo recorre entero, ineficiente si es grande
for (n in 2:(ncol(states77)-1)){
for (i in 1:dim(states77)[1]){
if (is.na(states77[i,n])) total <- total +1
}
}
print(total)
setwd("~/Documents/Programación/GIT/Learning-R/Computación en Estadística y Optimización/Preración segundo examen")
#apply - When you want to apply a function to the rows or columns of a matrix (and higher-dimensional analogues); not generally advisable for data frames as it will coerce to a matrix first.
M <- matrix(seq(1,16), 4, 4)
M
apply(M, 2, min)
apply(M, 1, min)
apply(M, 1, mean)   # ... columns
apply(M, 2, mean)   # ... rows
M <- array(seq(32), dim = c(4, 4, 2))
M
apply(M, 1, sum)    # ... M[*, , ] - i.e Sum across 2nd and 3rd dimension
apply(M, 2, sum)
apply(M, 3, sum)
apply(M, c(2,3), sum) #  M[, *, *] - i.e Sum across 1rd dimension -> Result is two-dimensional
apply(M, c(1,3), sum) #  M[*, , *] - i.e Sum across 2rd dimension -> Result is two-dimensional
apply(M, c(1,2), sum) #  M[*, *, ] - i.e Sum across 3rd dimension -> Result is two-dimensional
x <- list(a = 1, b = 1:3, c = 10:100)
lapply(x, FUN = length)
X
x
sapply(x, FUN = length())
x <- list(a = 1, b = 1:3, c = 10:100)
x
sapply(x, FUN = length)
x <- list(a = 1, b = 1:3, c = 10:100)
x
sapply(x, FUN = length)
sapply(1:5,function(x) rnorm(3,x))
sapply(1:5,function(x) matrix(x,2,2), simplify = "array")
sapply(1:5,function(x) matrix(x,2,2))
x <- list(a = 1, b = 1:3, c = 10:100)
vapply(x, FUN = length, FUN.VALUE = 0L)
mapply(sum, 1:5, 1:5, 1:5)
mapply(rep, 1:4, 4:1)
Map(sum, 1:5, 1:5, 1:5)
myFun <- function(x){
if(is.character(x)){
return(paste(x,"!",sep=""))
}
else{
return(x + 1)
}
}
l <- list(a = list(a1 = "Boo", b1 = 2, c1 = "Eeek"),
b = 3, c = "Yikes",
d = list(a2 = 1, b2 = list(a3 = "Hey", b3 = 5)))
rapply(l, myFun)
rapply(l, myFun, how = "replace")
x <- 1:20
x
y <- factor(rep(letters[1:5], each = 4))
y
tapply(x, y, sum)
data(iris)
str(iris)              # Structure of the dataset
tapply(iris$Sepal.Length, iris$Species, mean)
data(mtcars)
str(mtcars)
tapply(mtcars$mpg, list(mtcars$cyl, mtcars$am), mean)  # We are interested in seeing the avg mpg for the various transmission types and number of cylinders in car. This is nothing but avg mpg grouped by transmission type and the number of cylinders in car.
load("Datos.RData")
ls()
rm(list = ls())
load("Datos.RData")
ls()
load("Datos_immuno.RData")
ls()
rm("states77")
ls()
str(immuno)
str(immulong)
weekdays
weekdays()
wds <- table(weekdays(immulong$datvisit))
wds
immulong$datvisit
immulong$datvisit[1:10]
class(immulong$datvisit)
head(immulong, 5)
wds
class(wds)
table?
das
help(table)
horas_trabajo <- c(5, 7.5, 7.45, 5.9, 5, 4)
dias <- c("Lunes", "Martes", "Miércoles", "Jueves", "Viernes")
horas_trabajo <- c(5, 7.5, 7.45, 5.9, 5, 4)
table(dias, horas_trabajo)
horas_trabajo <- c(5, 7.5, 7.45, 5.9, 5)
table(dias, horas_trabajo)
table(rpois(100, 5))
table(rpois(100, 5))
dias <- c("Lunes", "Martes", "Miércoles", "Jueves", "Viernes")
t <- table(dias, horas_trabajo)
t
t[1,1]
t.dias
t$dias
t["dias"]
t["Lunes"]
t["Lunes", 5]
t["Lunes", "5"]
str(immulong)
with(immulong, table(sex, group))
with(immulong, table(sex, group))
t <- with(immulong, table(sex, group))
t
which[t == 57]
which(t == 57)
which(t == 42)
which(t == 28)
which(t == 54)
which(t == 18)
which(t == 57)
which(t == 54)
which(t == 18)
which(t == 42)
t[which.max(t)]
t[t == which.max(t)]
t[t == t[which.max(t)]]
t[t == t[which.max(t)]]
t[which.max(t)]
mosaicplot(t)
tt <- table(rpois(100, 5))
mosaicplot(tt)
dias <- c("Lunes", "Martes", "Miércoles", "Jueves", "Viernes")
horas_trabajo <- c(5, 7.5, 7.45, 5.9, 5)
t <- table(dias, horas_trabajo)
t
t[1,1]
t["dias"]
t["Lunes"]
t["Lunes", "5"]
mosaicplot(t)
barplot(t)
load("Datos.RData")
ls()
load("Datos.RData")
ls()
rm(list=ls())
ls()
load("Datos.RData")
ls()
summary(states77)
names(states77)
states77$hsg
states77$hsg[1:10]
reorder(states77$hsg, mean)
reorder(states77$reg, states77$hsg, mean)
ls()
names(states77)
load("Datos.RData")
ls()
summary(states77, 10)
states77$hsg[1:10]
reorder(states77$reg, states77$hsg, mean)
summary(states77, 10)
load("Datos.RData")
ls()
names(states77)
states77$stat[1:10]
reorder(states77$stat, states77$hsg, mean)
states77$stat[1:10]
reorder(states77$stat, -states77$hsg, mean)
states77$stat[1:10]
states77
states77$stat[1:10]
wds <- table(weekdays(immulong$datvisit))
wds
class(wds)
with(immulong, table(sex, group))
t <- with(immulong, table(sex, group))
t
which(t == 57) # así es como se numeran estos objetos, NO SON MATRICES!!
with(immulong, table(sex, group))
t <- with(immulong, table(sex, group))
load("Datos_immuno.RData")
ls()
str(immulong)
head(immulong, 5)
immulong$datvisit[1:10]
class(immulong$datvisit)
wds <- table(weekdays(immulong$datvisit))
wds
class(wds)
with(immulong, table(sex, group))
cosa <- factor()
cosa
cosa = cosa + "Hola"
help("factor")
cosa <- factor(seq(1:20))
add.fa
help("factor")
cosa
