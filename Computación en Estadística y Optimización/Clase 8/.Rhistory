plot(x, y, xlabel= "ejeX")
X = iris[,1]
X
length()
length(C)
length(X)
Y <- c(1:150)
length(Y)
plot(Y, X)
par(mfrow = x(1;4))
par(mfrow = x(1:4))
par(mfrow = c(1:4))
graphics.off()
par(mfrow = c(1:4))
par(mfrow = c(1, 4))
for (i in 1:4){}
for (i in 1:4){}
for (i in 1:4){plot(Y, iris[, i])}
summary(data("iris"))
Iris <- data("iris")
summary(Iris)
Iris_setosa = iris[iris == "setosa"]
Iris_setosa
data("iris")
Iris_setosa = iris[iris == "setosa"]
Iris_setosa
Iris_setosa[1:20, 1]
Iris_setosa[1:50, 1]
plot(vector)
vector
plot(p)
p <- c(1:20)
plot(p)
plot(p, type = "0", col = "blue")     # blue points overlayed by a line
plot(p, type = "o", col = "blue")     # blue points overlayed by a line
p <- c(1:20)
title("ponints", col.main = "red", font.main = 4)
p <- c(2, 3, 4.3, 2, 4, 3, 5, 4)
plot(p)         # just points
title("points", col.main = "red", font.main = 4)
plot(p, type = "o", col = "blue")     # blue points overlayed by a line
title("points", col.main = "red", font.main = 4)
title(main = "Money spend during a week", col.main = "red", font = 4)
graphics.off() # close all the graphics
dinner_spend <- c(10, 10, 10, 15.5, 10, 13, 17)
plot(lunch_spend, type = "o", col = "blue", ylimit = c(0, 6))     # using a y axis in a range (0, 6)
lines(dinner_spend, type = "o", pch = 22, lty = 2, col = "red") # red dashed line and square points
plot(lunch_spend, type = "o", col = "blue", ylim = c(0, 6))     # using a y axis in a range (0, 6)
lunch_spend <- c(10.99, 9, 6.1, 9.50, 6.30, 12, 18)
plot(lunch_spend, type = "o", col = "blue", ylim = c(0, 6))     # using a y axis in a range (0, 6)
plot(lunch_spend, type = "o", col = "blue")
plot(lunch_spend, type = "o", col = "blue", ylim = c(1, 12))
plot(lunch_spend, type = "o", col = "blue")     # using a y axis in a range (0, 6)
c = 1:10
c
mac(c)
max(c)
plot(lunch_spend, type = "o", col = "blue", ylim = c(1, max(lunch_spend) + 1))
lines(dinner_spend, type = "o", pch = 22, lty = 2, col = "red")
title("Money spend in food", col.main = "red", font.main = 4)
length((c))
graphics.off()
plot(lunch_spend, type = "o", col = "blue")     # using a y axis in a range (0, 6)
title("Lunch spend during a week", col.main = "red", font.main = 4)
plot(X)         # just points
plot(X)         # just points
X <- c(10.99, 9, 6.1, 9.50, 6.30, 12, 18)
plot(X)         # just points
plot(X, type = "o", col = "blue")     # blue points overlayed by a line, just that
"testeando los comentarios multiínea en R"
"coment"
/* comentario multilínea en R */
''
'''
aknda
oaneac
wevoan
x <- matrix(1:6, nrow = 2)
y <- 2*x
matplot(x, y) # just matplot, with no parameters
x <- matrix(1:45, nrow = 5)
y <- 2*x
matplot(x, y) # just matplot, with no parameters
matplot(x, y, type = 'o')
matplot(x, y, type = 'o')
matplot(x, y) # just matplot, with no parameters
matplot(x, y, type = 'o')
matplot(x, y, type = 'o', col = "black")
matplot(x, y, type = 'o', col = "black", lend = "p")
matplot(x, y, type = 'o', col = "black")
matplot(x, y, type = 'o', col = "black", lend = "p")
matplot(x, y, type = 'o', col = "black")
lends <- c("round","butt","square")
matplot(x, y, type = 'o', col = "black", lend = lends)
lends <- c("round","butt","square")
matplot(x, y, type = 'o', col = "black", lend = lends)
matplot(x, y, type = 'c', col = "black", lend = lends)
lends <- c("round","butt","square")
matplot(x, y, type = 'c', col = "black", lend = lends)
y <- 2*x
matplot(x, y) # just matplot, with no parameters
matplot(x, y, type = 'o', col = "black")
lends <- c("round","butt","square")
matplot(x, y, type = 'c', col = "black", lend = lends)
matplot(x, y, type = 'c', col = "black", lend = lends)
matplot(x, y, type = 'c', col = "black")
matplot(x, y, type = 'c', col = "black")
matplot(x, y, type = 'l', col = "black")
matplot(x, y, type = 'l', col = c("black", "red"))
data("iris")
matplot(iris)
summary(iris)
matplot(iris$Sepal.Length, main = "Sepal Length")
matplot(iris$Sepal.Length, main = "Sepal Length", ylab = "", sub = "of all the set")
matplot(iris[1:50, ]$Sepal.Length)
matplot(iris[1:50, ]$Sepal.Length, main = "Setosa Sepal Length", ylab = "", sub ="just for Setosa"
matplot(iris$Sepal.Length, main = "Sepal Length", ylab = "", sub = "of all the set")
matplot(iris[1:50, ]$Sepal.Length, main = "Setosa Sepal Length", ylab = "", sub ="just for Setosa"
matplot(iris[1:50, ]$Sepal.Length, main = "Setosa Sepal Length", ylab = "", sub ="just for Setosa")
matplot(iris$Sepal.Length, main = "Sepal Length", ylab = "", sub = "of all the set")
matplot(iris[1:50, ]$Sepal.Length, main = "Setosa Sepal Length", ylab = "", sub ="just for Setosa")
matplot(iris[1:50, ]$Sepal.Length, style = "o", main = "Setosa Sepal Length", ylab = "", sub ="just for Setosa")
matplot(iris[1:50, ]$Sepal.Length, style = "o", main = "Setosa Sepal Length", ylab = "", sub ="just for Setosa")
matplot(iris[1:50, ]$Sepal.Length, type = "o", main = "Setosa Sepal Length", ylab = "", sub ="just for Setosa")
matplot(iris[1:50, ]$Sepal.Length, type = "p", main = "Setosa Sepal Length", ylab = "", sub ="p type")
matplot(iris[1:50, ]$Sepal.Length, type = "n", main = "Setosa Sepal Length", ylab = "", sub ="o type")
matplot(iris[1:50, ]$Sepal.Length, type = "b", main = "Setosa Sepal Length", ylab = "", sub ="o type")
matplot(iris[1:50, ]$Sepal.Length, type = "b", main = "Setosa Sepal Length", ylab = "", sub ="b type")
matplot(iris[1:50, ]$Sepal.Length, type = "o", main = "Setosa Sepal Length", ylab = "", sub ="o type", lend = "round")
matplot(iris[1:50, ]$Sepal.Length, type = "o", main = "Setosa Sepal Length", ylab = "", sub ="o type", lend = "round")
matplot(iris[1:50, ]$Sepal.Length, type = "o", main = "Setosa Sepal Length", ylab = "", sub ="o type, lend round", lend = "round")
matplot(iris[1:50, ]$Sepal.Length, type = "o", main = "Setosa Sepal Length", ylab = "", sub ="o type, lend square", lend = "square")
matplot(iris[1:50, ]$Sepal.Length, type = "o", main = "Setosa Sepal Length", ylab = "", sub ="o type, lend square", lend = "square")
matplot(iris[1:50, ]$Sepal.Length, type = "c", main = "Setosa Sepal Length", ylab = "", sub ="c type, lend square", lend = "square")
matplot(iris[1:50, ]$Sepal.Length, type = "c", main = "Setosa Sepal Length", ylab = "", sub ="c type, lend butt", lend = "butt")
plot()
boxplot(x)
x <- c(2, 32, 3, 24, 2, 34, 2, 423, 2, 4, 2, 32, 23, 2, 342)
boxplot(x)
x <- c(2, 4, 2, 3, 4, 5, 7, 4)
boxplot(x)
boxplot(x, horizontal = TRUE)
boxplot(x, varwidth = TRUE) #  make box plot widths proportional to the square root of the sample sizes
boxplot(x, horizontal = TRUE) # make it horizontal
boxplot(x, varwidth = TRUE) #  make box plot widths proportional to the square root of the sample sizes
boxplot(x)
boxplot(x, varwidth = TRUE) #  make box plot widths proportional to the square root of the sample sizes
boxplot(x, horizontal = TRUE) # make it horizontal
boxplot(iris)
boxplot(iris$Sepal.Length, main = "Sepal Length", sub = "all the flowers")
boxplot(iris[1:50, ]$Sepal.Length, main = "Sepal Length", sub = "only Setosa")
boxplot(iris[1:50, ]$Sepal.Length, main = "Sepal Length", sub = "only Setosa")
boxplot(iris$Sepal.Length, main = "Sepal Length", sub = "all the flowers")
boxplot(iris[1:50, ]$Sepal.Length, main = "Sepal Length", sub = "only Setosa")
par(nfrow = c(1, 3))
boxplot(iris[1:50, ]$Sepal.Length, main = "Sepal Length", sub = "only Setosa")
boxplot(iris[51:100, ]$Sepal.Length, main = "Sepal Length", sub = "only Versicolor")
par(mfrow = c(1, 3))
boxplot(iris[1:50, ]$Sepal.Length, main = "Sepal Length", sub = "only Setosa")
boxplot(iris[51:100, ]$Sepal.Length, main = "Sepal Length", sub = "only Versicolor")
boxplot(iris[101:150, ]$Sepal.Length, main = "Sepal Length", sub = "only Virginica")
summary(iris)
boxplot(iris$Petal.Length, main = "Petal Length", sub = "all the flowers")
par()
boxplot(iris$Petal.Length, main = "Petal Length", sub = "all the flowers")
boxplot(iris[1:50, ]$Sepal.Length, main = "Sepal Length", sub = "only Setosa")
boxplot(iris[51:100, ]$Sepal.Length, main = "Sepal Length", sub = "only Versicolor")
boxplot(iris[101:150, ]$Sepal.Length, main = "Sepal Length", sub = "only Virginica")
par()
boxplot(iris$Petal.Length, main = "Petal Length", sub = "all the flowers")
par(mfrow=c(1,1))
boxplot(iris$Petal.Length, main = "Petal Length", sub = "all the flowers")
boxplot(iris$Petal.Length, main = "Petal Length", sub = "all the flowers", col = "red")
boxplot(iris$Sepal.Length, main = "Sepal Length", sub = "all the flowers")
boxplot(iris[1:50, ]$Sepal.Length, main = "Sepal Length", sub = "only Setosa")
par(mfrow = c(1, 3))
boxplot(iris[1:50, ]$Sepal.Length, main = "Sepal Length", sub = "only Setosa")
boxplot(iris[51:100, ]$Sepal.Length, main = "Sepal Length", sub = "only Versicolor")
boxplot(iris[101:150, ]$Sepal.Length, main = "Sepal Length", sub = "only Virginica")
par(mfrow=c(1,1))     # ugly way to reset 'par'
boxplot(iris$Petal.Length, main = "Petal Length", sub = "all the flowers", col = "red")
g_range == range(0, max(Y))   # returns TRUE TRUE
plot(lunch_spend, type = "o", col = "blue", ylim = g_range, axes = FALSE, ann = FALSE)
lines(dinner_spend, type = "o", pch = 22, lty = 2, col = "red")
title("Money spend in food", col.main = "red", font.main = 4)
days <- c("Mond", "Tues", "Wed", "Thu", "Fri", "Sat", "Sun")
axis(1, at = 1:length(days), lab = days)
axis(2, at = 4 * grange[2])
setwd("~/Documents/Programación/GIT/Learning-R/Computación en Estadística y Optimización/Clase 8")
library(Hmisc)
load("Immunology.RData")
for (i in c(1, 4, 9, 10)) {
print("Hello!")
cat("The square root of ", i, " is ", round(sqrt(i), 3), ".\n", sep = "")
}
library(Hmisc)
load("Immunology.RData")
for (i in c(1, 4, 9, 10)) {
print("Hello!")
cat("The square root of ", i, " is ", round(sqrt(i), 3), ".\n", sep = "")
}
rm(i)
names(immuno)
pdf("SomeBoxplots.pdf")
par(las = 1, font.axis = 2, font.lab = 4)
for (i in c(8, 11, 14, 17)) {
boxplot(immuno[, i] ~ group, immuno, ylab = units(immuno[, i]),
main = label(immuno[, i]), col = 2:4, pch = 16)
}
dev.off()
rm(i)
for (l in levels(immuno$group)) {
cat("\nStudy group:", l, fill = TRUE)
corr <- with(subset(immuno, group == l), cor.test(cd4v1, nkiller1))
cat("Correlation (Pearson): ", round(corr$est, 3), ".",
sep = "", fill = TRUE)
}
rm(l)
set.seed(1010)
(x <- round(rnorm(10, 0, 2), 4))
for (i in 1:length(x)) {
if (x[i] > 0) {
cat("The square root of", round(x[i], 3), "is", round(sqrt(x[i]), 3), "\n")
} else {
cat("Warning:", x[i], "is a negative number.\n")
}
}
rm(i, x)
(x <- rbinom(10, 1, .5))
gend <-
gend
(x <- rpois(30, 35))
factor(ifelse(x < 30, "Joven", ifelse(x < 40, "No tan joven", "Un poco mayor")))
repeat {
x <- rpois(3, 35)
print(x)
if (any(duplicated(x)))
break
}
rm(x)
x <- 1:10
i <- 1
while (x[i]^2 < 40) {
cat("The value of x[", i, "] is ", x[i], " and its square number is ",
x[i]^2, ".\n", sep = "")
i = i + 1
}
rm(i, x)
now <- as.POSIXlt(Sys.time())
while (Sys.time() < now + 15) {
cat("\r", format(Sys.time(), "%H:%M:%S"))
flush.console()
Sys.sleep(1)
}
rm(now)
x <- rnorm(75000)
y <- rnorm(75000)
z <- NULL
for (i in 1:75000) {
z <- c(z, x[i] + y[i])
}
z <- numeric(75000)
for (i in 1:75000) {
z[i] <- x[i] + y[i]
}
system.time({
z <- NULL
for (i in 1:75000) {
z <- c(z, x[i] + y[i])
}
})
system.time({
z <- numeric(75000)
for (i in 1:75000) {
z[i] <- x[i] + y[i]
}
})
system.time(z <- x + y)
x <- rnorm(75000)
y <- rnorm(75000)
z <- c()
total <- length(x)
pb <- winProgressBar(title = "Progress bar", min = 0, max = total, width = 300)
for (i in 1:total) {
z <- c(z, x[i] + y[i])
setWinProgressBar(pb, i, title = paste(round(i/total*100, 0), "% done"))
}
close(pb)
rm(i, total)
myList <- list(24, 111, -23, NA, "NoNumber", 19, 91)
for (i in myList) {
cat("The square root of", i, "is", round(sqrt(i), 3), "\n")
}
rm(i, myList)
library(microbenchmark)
x <- rnorm(10000)
microbenchmark(
x^2,
x*x
)
mx <- microbenchmark(
x^2,
x*x
)
boxplot(mx, log = FALSE, ylab = "Microseconds", col = 3:4)
library(ggplot2)
autoplot(mx)
x <- rnorm(1000)
y <- rnorm(1000)
z <- numeric(1000)
microbenchmark(
x + y,
for (i in 1:1000) {
z[i] <- x[i] + y[i]
},
unit = "ms"
)
library(doBy)
library(plyr)
mx <- microbenchmark(
with(immulong, immulong[order(-vol, visit), ]),
orderBy(~-vol + visit, immulong),
arrange(immulong, desc(vol), visit)
)
mx
autoplot(mx)
set.seed(222)
city <- sample(c("BCN", "GIR", "LLE", "TAR"), 100, replace = TRUE)
mc <- microbenchmark(
sum(city %in% c("GIR", "TAR")),
sum(city == "GIR" | city == "TAR")
)
mc
sapply(immuno, summary)
sapply(immuno[8:19], mean)
library(mail)
sendmail("...@...", subject = "...", message = "This R lecture is ...")
names(immuno)
pdf("SomeBoxplots.pdf")
par(las = 1, font.axis = 2, font.lab = 4)
for (i in c(8, 11, 14, 17)) {
boxplot(immuno[, i] ~ group, immuno, ylab = units(immuno[, i]),
main = label(immuno[, i]), col = 2:4, pch = 16)
}
dev.off()
rm(i)
names(immuno)
pdf("SomeBoxplots.pdf")
pdf("SomeBoxplots.pdf") # creamos una conexión con un fichero, al no existir se creará
par(las = 1, font.axis = 2, font.lab = 4)
for (i in c(8, 11, 14, 17)) {
boxplot(immuno[, i] ~ group, immuno, ylab = units(immuno[, i]),
main = label(immuno[, i]), col = 2:4, pch = 16)
}
dev.off() # cerramos la conexión con el fichero
boxplot(mx, log = FALSE, ylab = "Microseconds", col = 3:4)
library(ggplot2)
library(ggplot2)
autoplot(mx)
x <- rnorm(75000)
y <- rnorm(75000)
z <- c()
total <- length(x)
pb <- winProgressBar(title = "Progress bar", min = 0, max = total, width = 300)
for (i in 1:total) {
z <- c(z, x[i] + y[i])
setWinProgressBar(pb, i, title = paste(round(i/total*100, 0), "% done"))
}
close(pb)
rm(i, total)
myList <- list(24, 111, -23, NA, "NoNumber", 19, 91)
for (i in myList) {
cat("The square root of", i, "is", round(sqrt(i), 3), "\n")
}
rm(i, myList)
library(microbenchmark)
x <- rnorm(10000)
microbenchmark(
x^2,
x*x
)
mx <- microbenchmark(
x^2,
x*x
)
library(mail)
immuno[, i]
immuno[, 8]
names(immuno)
names(immuno)[8]
print("hola" + "yo")
print(paste("hola", "yo"))
print(paste("hola", "yo", sep = ""))
for (i in c(8, 11, 14, 17)) {
pdf(paste(names(immuno)[i], ".pdf", sep = "")) # conectamos (y creamos) el pdf que contendrá el gráfico al comienzo del mismo
boxplot(immuno[, i] ~ group, immuno, ylab = units(immuno[, i]),
main = label(names(immuno)[i]), col = 2:4, pch = 16)
dev.off() # cerramos la conexión con el fichero recién creado
}
for (l in levels(immuno$group)) {
cat("\nStudy group:", l, fill = TRUE)
corr <- with(subset(immuno, group == l), cor.test(cd4v1, nkiller1))
cat("Correlation (Pearson): ", round(corr$est, 3), ".",
sep = "", fill = TRUE)
}
(x <- round(rnorm(10, 0, 2), 4))
for (i in 1:length(x)) {
if (x[i] > 0) {
cat("The square root of", round(x[i], 3), "is", round(sqrt(x[i]), 3), "\n")
} else {
cat("Warning:", x[i], "is a negative number.\n")
}
}
(x <- rbinom(10, 1, .5))
gend <- ifelse(x == 0, "Female", "Male")    # si x = 0 devuelve "Female", si no "Male"
gend
gen2 <- factor(x, labels = c("Female", "Male"))
gen2
(x <- rpois(30, 35))
factor(ifelse(x < 30, "Joven", ifelse(x < 40, "No tan joven", "Un poco mayor")))
repeat {
x <- rpois(3, 35)
print(x)
if (any(duplicated(x)))
break
}
rm(x)
x <- 1:10
repeat {
x <- rpois(3, 35)
print(x)
if (any(duplicated(x)))
break
}
repeat {
x <- rpois(3, 35)
print(x)
if (any(duplicated(x)))  # si se repite alguno de los valores paramos
break
}
repeat {
x <- rpois(3, 35)
print(x)
if (any(duplicated(x)))  # si se repite alguno de los valores paramos
break
}
repeat {
x <- rpois(3, 35)
print(x)
if (any(duplicated(x)))  # si se repite alguno de los valores paramos
break
}
i <- 1
while (x[i]^2 < 40) {
cat("The value of x[", i, "] is ", x[i], " and its square number is ",
x[i]^2, ".\n", sep = "")
i = i + 1
}
rm(i, x)
x <- 1:10
i <- 1
while (x[i]^2 < 40) {
cat("The value of x[", i, "] is ", x[i], " and its square number is ",
x[i]^2, ".\n", sep = "")
i = i + 1
}
x <- 1:10
i <- 1
while (x[i]^2 < 40) {
cat("The value of x[", i, "] is ", x[i], " and its square number is ",
x[i]^2, ".\n", sep = "")
i = i + 1
}
now <- as.POSIXlt(Sys.time())
while (Sys.time() < now + 15) {
cat("\r", format(Sys.time(), "%H:%M:%S"))
flush.console()
Sys.sleep(1)
}
cat("\r", format(Sys.time(), "%H:%M:%S"))  # nos escribe la hora en el fotmato correcto
flush.console() # actualiza la pantalla continuamente
Sys.sleep(1)
while (Sys.time() < now + 15) {
cat("\r", format(Sys.time(), "%H:%M:%S"))  # nos escribe la hora en el fotmato correcto
flush.console() # actualiza la pantalla continuamente
Sys.sleep(1)
}
rm(now)
now <- as.POSIXlt(Sys.time())
while (Sys.time() < now + 15) {
cat("\r", format(Sys.time(), "%H:%M:%S"))  # nos escribe la hora en el fotmato correcto
flush.console() # actualiza la pantalla continuamente
Sys.sleep(1)
}
lista <- vactor("list", 10)
lista <- vector("list", 10)
lista <- vector("list", 10)   # creamos una lista vacía
for (i in 1:10) {
lista[i] = vector("list", 4)
for (j in 1:4) {
lista[i][j] = i + j
}
}
lista
lista <- vector("list", 10)   # creamos una lista vacía
for (i in 1:10) {
lista[i] <-  vector("list", 4)
for (j in 1:4) {
lista[i][j] = i + j
}
}
lista
