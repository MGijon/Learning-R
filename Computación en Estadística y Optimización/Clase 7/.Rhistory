return(x + y)
}
suma(x, y)
suma()
suma(3, 132)
suma()
clear
x <- 1:10
y <- 1:10
plot(e, y)
plot(x, y)
4 * x
x * y
plot(x, y)
x <- x*y*51
plot(x, y)
1:4:0.1
1:3
1:0.1:10
library(zoo)
equipoLocal=zoo(nMedioGolesLocal, order.by=fechasLiga)
zoo?
clearPushBack()
demo("graphics")
schico <- diamonds[sample(nrow(diamonds), 100), ]
help("read.table")
read.table?
ccals
cls
data("iris")
dim(iris)
iris
levels(dataset$Species)
levels(iris$Species)
percentage <- prop.table(table(iris$Species)) * 100
cbind(freq = table(iris$Species), percentage = percentage)
summary(iris)
y <- iris[, 5]
boxplot(x[, i], main = names(iris)[i])
data("iris")
dim(iris)   # filas, columnas
for i in 1:4{
boxplot(x[, i], main = names(iris)[i])
}
x <- iris[, 1:4]
x
par(mfrow = c(1, 4))
for i in 1:4{
boxplot(x[, i], main = names(iris)[i])
}
boxplot(x[,i], main = names(iris)[i])
{
boxplot(x[,i], main = names(iris)[i])
}
ce,ar
install.packages("Hmisc")
library(Hsmisc)
library(Hmisc)
install.packages("Openxlex")
summary(iris)
sumary([1:50, ])
sumary(irirs[1:50, ])
sumary(iris[1:50, ])
summary(iris[1:50, ])
summary(iris[51:100,])
summary(iris[101:,])
summary(iris[101:150,])
naciento <- 04-04-1994
naciemiento
hoy <- 26-09-2017
hoy - nacimiento
hoy - naciento
clear
nacimiento <- as.Date("1994-04-04")
hoy <- as.Date("2017-09-26")
hoy - nacimiento
1994 + 70
muerte <- as.Date("2064-04-04")
muerte-hoy
16992 / 365.25
weekdays(nacimiento)
weekdays(muerte)
weekdays(hoy)
month(muerte)
months(muerte)
months(hoy)
months(nacimiento)
Sys.getlocale()
Sys.getlocale("LC_ALL")
Sys.getlocale("LC_ALL", "esp")
Sys.setlocale("LC_ALL", "esp")
Sys.setlocale("LC_ALL", "vas")
Sys.setlocale("LC_ALL", "Basque")
sys.setlocale("LC_ALL", "Basque")
Sys.setlocale("LC_ALL", "Basque")
which(is.na(Iris))  # si el dato es missing True, nos
Iris = data("Iris")
Iris = data("iris")
Iris = data("iris")
which(is.na(Iris))  # si el dato es missing True, nos
which(is.na(Iris), arr.ind = TRUE)
boxplot(mgp~cyl, Iris, main = 'primer boxplot con R', xlab = "eje x", ylab = "ylab")
boxplot(mgp~cyl, Iris, main = "primer boxplot con R", xlab = "eje x", ylab = "ylab")
install.packages(""datasets.load"")
install.packages(datasets.load")
mclwncsa
c kejaf aca
-sda
cnnkd
mankcsa
cknasc a
as a
nkanc
alcpmalksmclac+
install.packages("datasets")
install.packages("datasets")
load("iris")
data("iris")
iris
x <- iris[,1:2]
x
x <- iris[,1]
x
len(x)
dim(x)
summary(x)
x <- c(1:100)
y <- c(1:2:200)
y <- c(1:200:2)
y <- 2*x
plot(x, y)
xlabel("ejex")
plot(x, y, xlabel= "ejeX")
X = iris[,1]
X
length()
length(C)
length(X)
Y <- c(1:150)
length(Y)
plot(Y, X)
par(mfrow = x(1;4))
par(mfrow = x(1:4))
par(mfrow = c(1:4))
graphics.off()
par(mfrow = c(1:4))
par(mfrow = c(1, 4))
for (i in 1:4){}
for (i in 1:4){}
for (i in 1:4){plot(Y, iris[, i])}
summary(data("iris"))
Iris <- data("iris")
summary(Iris)
Iris_setosa = iris[iris == "setosa"]
Iris_setosa
data("iris")
Iris_setosa = iris[iris == "setosa"]
Iris_setosa
Iris_setosa[1:20, 1]
Iris_setosa[1:50, 1]
plot(vector)
vector
plot(p)
p <- c(1:20)
plot(p)
plot(p, type = "0", col = "blue")     # blue points overlayed by a line
plot(p, type = "o", col = "blue")     # blue points overlayed by a line
p <- c(1:20)
title("ponints", col.main = "red", font.main = 4)
p <- c(2, 3, 4.3, 2, 4, 3, 5, 4)
plot(p)         # just points
title("points", col.main = "red", font.main = 4)
plot(p, type = "o", col = "blue")     # blue points overlayed by a line
title("points", col.main = "red", font.main = 4)
title(main = "Money spend during a week", col.main = "red", font = 4)
graphics.off() # close all the graphics
dinner_spend <- c(10, 10, 10, 15.5, 10, 13, 17)
plot(lunch_spend, type = "o", col = "blue", ylimit = c(0, 6))     # using a y axis in a range (0, 6)
lines(dinner_spend, type = "o", pch = 22, lty = 2, col = "red") # red dashed line and square points
plot(lunch_spend, type = "o", col = "blue", ylim = c(0, 6))     # using a y axis in a range (0, 6)
lunch_spend <- c(10.99, 9, 6.1, 9.50, 6.30, 12, 18)
plot(lunch_spend, type = "o", col = "blue", ylim = c(0, 6))     # using a y axis in a range (0, 6)
plot(lunch_spend, type = "o", col = "blue")
plot(lunch_spend, type = "o", col = "blue", ylim = c(1, 12))
plot(lunch_spend, type = "o", col = "blue")     # using a y axis in a range (0, 6)
c = 1:10
c
mac(c)
max(c)
plot(lunch_spend, type = "o", col = "blue", ylim = c(1, max(lunch_spend) + 1))
lines(dinner_spend, type = "o", pch = 22, lty = 2, col = "red")
title("Money spend in food", col.main = "red", font.main = 4)
length((c))
graphics.off()
plot(lunch_spend, type = "o", col = "blue")     # using a y axis in a range (0, 6)
title("Lunch spend during a week", col.main = "red", font.main = 4)
plot(X)         # just points
plot(X)         # just points
X <- c(10.99, 9, 6.1, 9.50, 6.30, 12, 18)
plot(X)         # just points
plot(X, type = "o", col = "blue")     # blue points overlayed by a line, just that
"testeando los comentarios multiÃ­nea en R"
"coment"
/* comentario multilÃ­nea en R */
''
'''
aknda
oaneac
wevoan
x <- matrix(1:6, nrow = 2)
y <- 2*x
matplot(x, y) # just matplot, with no parameters
x <- matrix(1:45, nrow = 5)
y <- 2*x
matplot(x, y) # just matplot, with no parameters
matplot(x, y, type = 'o')
matplot(x, y, type = 'o')
matplot(x, y) # just matplot, with no parameters
matplot(x, y, type = 'o')
matplot(x, y, type = 'o', col = "black")
matplot(x, y, type = 'o', col = "black", lend = "p")
matplot(x, y, type = 'o', col = "black")
matplot(x, y, type = 'o', col = "black", lend = "p")
matplot(x, y, type = 'o', col = "black")
lends <- c("round","butt","square")
matplot(x, y, type = 'o', col = "black", lend = lends)
lends <- c("round","butt","square")
matplot(x, y, type = 'o', col = "black", lend = lends)
matplot(x, y, type = 'c', col = "black", lend = lends)
lends <- c("round","butt","square")
matplot(x, y, type = 'c', col = "black", lend = lends)
y <- 2*x
matplot(x, y) # just matplot, with no parameters
matplot(x, y, type = 'o', col = "black")
lends <- c("round","butt","square")
matplot(x, y, type = 'c', col = "black", lend = lends)
matplot(x, y, type = 'c', col = "black", lend = lends)
matplot(x, y, type = 'c', col = "black")
matplot(x, y, type = 'c', col = "black")
matplot(x, y, type = 'l', col = "black")
matplot(x, y, type = 'l', col = c("black", "red"))
data("iris")
matplot(iris)
summary(iris)
matplot(iris$Sepal.Length, main = "Sepal Length")
matplot(iris$Sepal.Length, main = "Sepal Length", ylab = "", sub = "of all the set")
matplot(iris[1:50, ]$Sepal.Length)
matplot(iris[1:50, ]$Sepal.Length, main = "Setosa Sepal Length", ylab = "", sub ="just for Setosa"
matplot(iris$Sepal.Length, main = "Sepal Length", ylab = "", sub = "of all the set")
matplot(iris[1:50, ]$Sepal.Length, main = "Setosa Sepal Length", ylab = "", sub ="just for Setosa"
matplot(iris[1:50, ]$Sepal.Length, main = "Setosa Sepal Length", ylab = "", sub ="just for Setosa")
matplot(iris$Sepal.Length, main = "Sepal Length", ylab = "", sub = "of all the set")
matplot(iris[1:50, ]$Sepal.Length, main = "Setosa Sepal Length", ylab = "", sub ="just for Setosa")
matplot(iris[1:50, ]$Sepal.Length, style = "o", main = "Setosa Sepal Length", ylab = "", sub ="just for Setosa")
matplot(iris[1:50, ]$Sepal.Length, style = "o", main = "Setosa Sepal Length", ylab = "", sub ="just for Setosa")
matplot(iris[1:50, ]$Sepal.Length, type = "o", main = "Setosa Sepal Length", ylab = "", sub ="just for Setosa")
matplot(iris[1:50, ]$Sepal.Length, type = "p", main = "Setosa Sepal Length", ylab = "", sub ="p type")
matplot(iris[1:50, ]$Sepal.Length, type = "n", main = "Setosa Sepal Length", ylab = "", sub ="o type")
matplot(iris[1:50, ]$Sepal.Length, type = "b", main = "Setosa Sepal Length", ylab = "", sub ="o type")
matplot(iris[1:50, ]$Sepal.Length, type = "b", main = "Setosa Sepal Length", ylab = "", sub ="b type")
matplot(iris[1:50, ]$Sepal.Length, type = "o", main = "Setosa Sepal Length", ylab = "", sub ="o type", lend = "round")
matplot(iris[1:50, ]$Sepal.Length, type = "o", main = "Setosa Sepal Length", ylab = "", sub ="o type", lend = "round")
matplot(iris[1:50, ]$Sepal.Length, type = "o", main = "Setosa Sepal Length", ylab = "", sub ="o type, lend round", lend = "round")
matplot(iris[1:50, ]$Sepal.Length, type = "o", main = "Setosa Sepal Length", ylab = "", sub ="o type, lend square", lend = "square")
matplot(iris[1:50, ]$Sepal.Length, type = "o", main = "Setosa Sepal Length", ylab = "", sub ="o type, lend square", lend = "square")
matplot(iris[1:50, ]$Sepal.Length, type = "c", main = "Setosa Sepal Length", ylab = "", sub ="c type, lend square", lend = "square")
matplot(iris[1:50, ]$Sepal.Length, type = "c", main = "Setosa Sepal Length", ylab = "", sub ="c type, lend butt", lend = "butt")
plot()
boxplot(x)
x <- c(2, 32, 3, 24, 2, 34, 2, 423, 2, 4, 2, 32, 23, 2, 342)
boxplot(x)
x <- c(2, 4, 2, 3, 4, 5, 7, 4)
boxplot(x)
boxplot(x, horizontal = TRUE)
boxplot(x, varwidth = TRUE) #  make box plot widths proportional to the square root of the sample sizes
boxplot(x, horizontal = TRUE) # make it horizontal
boxplot(x, varwidth = TRUE) #  make box plot widths proportional to the square root of the sample sizes
boxplot(x)
boxplot(x, varwidth = TRUE) #  make box plot widths proportional to the square root of the sample sizes
boxplot(x, horizontal = TRUE) # make it horizontal
boxplot(iris)
boxplot(iris$Sepal.Length, main = "Sepal Length", sub = "all the flowers")
boxplot(iris[1:50, ]$Sepal.Length, main = "Sepal Length", sub = "only Setosa")
boxplot(iris[1:50, ]$Sepal.Length, main = "Sepal Length", sub = "only Setosa")
boxplot(iris$Sepal.Length, main = "Sepal Length", sub = "all the flowers")
boxplot(iris[1:50, ]$Sepal.Length, main = "Sepal Length", sub = "only Setosa")
par(nfrow = c(1, 3))
boxplot(iris[1:50, ]$Sepal.Length, main = "Sepal Length", sub = "only Setosa")
boxplot(iris[51:100, ]$Sepal.Length, main = "Sepal Length", sub = "only Versicolor")
par(mfrow = c(1, 3))
boxplot(iris[1:50, ]$Sepal.Length, main = "Sepal Length", sub = "only Setosa")
boxplot(iris[51:100, ]$Sepal.Length, main = "Sepal Length", sub = "only Versicolor")
boxplot(iris[101:150, ]$Sepal.Length, main = "Sepal Length", sub = "only Virginica")
summary(iris)
boxplot(iris$Petal.Length, main = "Petal Length", sub = "all the flowers")
par()
boxplot(iris$Petal.Length, main = "Petal Length", sub = "all the flowers")
boxplot(iris[1:50, ]$Sepal.Length, main = "Sepal Length", sub = "only Setosa")
boxplot(iris[51:100, ]$Sepal.Length, main = "Sepal Length", sub = "only Versicolor")
boxplot(iris[101:150, ]$Sepal.Length, main = "Sepal Length", sub = "only Virginica")
par()
boxplot(iris$Petal.Length, main = "Petal Length", sub = "all the flowers")
par(mfrow=c(1,1))
boxplot(iris$Petal.Length, main = "Petal Length", sub = "all the flowers")
boxplot(iris$Petal.Length, main = "Petal Length", sub = "all the flowers", col = "red")
boxplot(iris$Sepal.Length, main = "Sepal Length", sub = "all the flowers")
boxplot(iris[1:50, ]$Sepal.Length, main = "Sepal Length", sub = "only Setosa")
par(mfrow = c(1, 3))
boxplot(iris[1:50, ]$Sepal.Length, main = "Sepal Length", sub = "only Setosa")
boxplot(iris[51:100, ]$Sepal.Length, main = "Sepal Length", sub = "only Versicolor")
boxplot(iris[101:150, ]$Sepal.Length, main = "Sepal Length", sub = "only Virginica")
par(mfrow=c(1,1))     # ugly way to reset 'par'
boxplot(iris$Petal.Length, main = "Petal Length", sub = "all the flowers", col = "red")
g_range == range(0, max(Y))   # returns TRUE TRUE
plot(lunch_spend, type = "o", col = "blue", ylim = g_range, axes = FALSE, ann = FALSE)
lines(dinner_spend, type = "o", pch = 22, lty = 2, col = "red")
title("Money spend in food", col.main = "red", font.main = 4)
days <- c("Mond", "Tues", "Wed", "Thu", "Fri", "Sat", "Sun")
axis(1, at = 1:length(days), lab = days)
axis(2, at = 4 * grange[2])
load("Immunology.RData")
library(Hmisc)
class(immuno) # data.frame
head(immuno)
View(immuno)  # visualizamos su estado antes de la reordenaciÃ³n
head(reshape(immuno, direction = "long", idvar = "vol", varying = list(5:7, 8:10, 11:13, 14:16, 17:19)), 10)
tail(reshape(immuno, direction = "long", idvar = "vol", varying = list(5:7, 8:10, 11:13, 14:16, 17:19)), 10)
dim(reshape(immuno, direction = "long", idvar = "vol", varying = list(5:7, 8:10, 11:13, 14:16, 17:19)))
immulong <- reshape(immuno, direction = "long", idvar = "vol", varying = list(5:7, 8:10, 11:13, 14:16, 17:19),
v.names = c("datvisit", "lympho", "cd4", "cd8", "nkiller"), timevar = "visit", drop = "datbirth")
head(immuno)
View(immulong)
immulong <- with(immulong, immulong[order(vol, visit), ])
library(doBy)
immulong <- orderBy(~vol + visit, immulong)
head(immulong, 10)
str(immulong)
summary(immulong)
Label(immulong)
label(immulong$group)    <- "Study group"
label(immulong$sex)      <- "Sex"
label(immulong$visit)    <- "Number of visit"
label(immulong$datvisit) <- "Date of visit"
label(immulong$lympho)   <- "Lymphocytes"
label(immulong$cd4)      <- "CD4 cells"
label(immulong$cd8)      <- "CD8 cells"
label(immulong$nkiller)  <- "Natural killer cells"
describe(immulong)
head(immulong)
diff(immulong$datvisit)
diff(immulong$datvisit) # Para un vector de fechas calculamos el tiempo en dÃ­a entre valores consecutivos
c(0, diff(immulong$datvisit))  # PodrÃ­amos usar esto, bucles y demÃ¡s...
load("Immunology.RData")
setwd("~/Documents/ProgramaciÃ³n/GIT/Learning-R/ComputaciÃ³n en EstadÃ­stica y OptimizaciÃ³n/Clase 7")
load("Immunology.RData")
library(Hmisc)
class(immuno) # data.frame
head(immuno)
View(immuno)  # visualizamos su estado antes de la reordenaciÃ³n
head(reshape(immuno, direction = "long", idvar = "vol", varying = list(5:7, 8:10, 11:13, 14:16, 17:19)), 10)
tail(reshape(immuno, direction = "long", idvar = "vol", varying = list(5:7, 8:10, 11:13, 14:16, 17:19)), 10)
dim(reshape(immuno, direction = "long", idvar = "vol", varying = list(5:7, 8:10, 11:13, 14:16, 17:19)))
immulong <- reshape(immuno, direction = "long", idvar = "vol", varying = list(5:7, 8:10, 11:13, 14:16, 17:19),
v.names = c("datvisit", "lympho", "cd4", "cd8", "nkiller"), timevar = "visit", drop = "datbirth")
head(immuno)
View(immulong)
immulong <- with(immulong, immulong[order(vol, visit), ])
library(doBy)
immulong <- orderBy(~vol + visit, immulong)
head(immulong, 10)
str(immulong)
summary(immulong)
Label(immulong)
label(immulong$group)    <- "Study group"
label(immulong$sex)      <- "Sex"
label(immulong$visit)    <- "Number of visit"
label(immulong$datvisit) <- "Date of visit"
label(immulong$lympho)   <- "Lymphocytes"
label(immulong$cd4)      <- "CD4 cells"
label(immulong$cd8)      <- "CD8 cells"
label(immulong$nkiller)  <- "Natural killer cells"
describe(immulong)
head(immulong)
diff(immulong$datvisit)
diff(immulong$datvisit) # Para un vector de fechas calculamos el tiempo en dÃ­a entre valores consecutivos
c(0, diff(immulong$datvisit))  # PodrÃ­amos usar esto, bucles y demÃ¡s...
library(plyr)
immulong <- ddply(immulong, ~vol, transform, vis2vis = c(0, diff(datvisit)))
immulong <- ddply(immulong, ~vol, transform, totime = cumsum(vis2vis))
head(immulong, 12)
comment(immulong) <- "Same data as data frame immuno in long format"
save(immuno, immulong, file = "Immunology.RData")
library(plotrix)
install.packages("plotrix")
library(plotrix)
example(twoord.plot)
example(pyramid.plot)
windows(width = 10)
qplot(x = group, y = lympho1, data = immuno, geom = "boxplot")
qplot(x = group, y = lympho1, data = immuno, geom = "boxplot")
p + geom_boxplot()
p + geom_boxplot(fill = 2:4) +
labs(title = attr(immuno$lympho1, "label"),
y = attr(immuno$lympho1, "units"), x = "Study groups")
p + geom_boxplot(aes(fill = sex)) +
labs(title = "Lymphocytes per group and gender",
y = attr(immuno$lympho1, "units"), x = "Study groups")
p + geom_boxplot(fill = rep(c("tomato", "olivedrab", "steelblue"), 2)) +
labs(title = "Lymphocytes per group and gender",
y = attr(immuno$lympho1, "units"), x = "Study groups") +
facet_grid(~ sex)
p + geom_boxplot(fill = rep(c("tomato", "olivedrab", "steelblue"), 2)) +
labs(title = "Lymphocytes per group and gender",
y = attr(immuno$lympho1, "units"), x = "Study groups") +
facet_grid(sex ~ .)
p + geom_boxplot(fill = rep(c("tomato", "olivedrab", "steelblue"), 2)) +
labs(title = "Lymphocytes per group and gender",
y = attr(immuno$lympho1, "units"), x = "Study groups") +
facet_grid(sex ~ .)
p <- ggplot(immuno, aes(nkiller1, cd4v1))
p + geom_point(aes(color = group), size=3) +
labs(title = "CD4 cells vs. Natural killer cells",
y = attr(immuno$cd4v1, "units"),
x = attr(immuno$nkiller1, "units")) +
theme(legend.position = "bottom") +
ylim(400, max(immuno$cd4v1)) +
scale_colour_discrete(name = "Study group")
draws <- rnorm(1000)^2
dens <- density(draws)
dens
str(dens)
plot(dens)
(q95 <- quantile(draws, .95))
x1 <- min(which(dens$x >= q75))
x2 <- max(which(dens$x <  q95))
dd <- data.frame(x = dens$x, y = dens$y)
qplot(x, y, data = dd, geom = "line") +
geom_ribbon(data = subset(dd, x > q75 & x < q95), aes(ymax = y), ymin = 0,
fill = "red", colour = NA, alpha = 0.5)
library(plotly)
install.packages("plotly")
library(plotly)
install.packages("plotly")
library(plotly)
library(plotly)
plot_ly(immuno, x = ~ cd4v1, color = ~ group, type = "box")
plot_ly(immuno, x = ~ nkiller1, y = ~ cd4v1, mode = "markers", color = ~ age)
install.packages("plotly")
library(plotly)
plot_ly(immuno, x = ~ cd4v1, color = ~ group, type = "box")
plot_ly(immuno, x = ~ nkiller1, y = ~ cd4v1, mode = "markers", color = ~ age)
library(lattice)
library(playwith)
playwith(xyplot(lympho~totime|group, data = immulong, layout = c(3, 1),
groups = vol, subscripts = group,
par.strip.text = list(cex = 1.1, font = 2),
main = attr(immulong$lympho, "label"),
xlab = list("Months from first visit", font = 4),
ylab = list(attr(immulong$lympho, "units"), font = 4),
scales = list(font = 2, cex = 1.05, tck = c(0.7, 0),
x = list(alternating = FALSE),
y = list(alternating = FALSE)),
panel = function(x = x, y = y, subscripts = subscripts,
groups = immulong$vol) {
panel.grid(h = -1, v = -1)
panel.superpose(x, y, subscripts = subscripts, groups = groups,
type = c("p", "b"), col = 1, lwd = 2,
pch = 18, cex = 1.1)
}))
install.packages("cairoDevice", "gWidgetsRGtk2", "RGtk2", "gWidgets", "playwith")
playwith(xyplot(lympho~totime|group, data = immulong, layout = c(3, 1),
groups = vol, subscripts = group,
par.strip.text = list(cex = 1.1, font = 2),
main = attr(immulong$lympho, "label"),
xlab = list("Months from first visit", font = 4),
ylab = list(attr(immulong$lympho, "units"), font = 4),
scales = list(font = 2, cex = 1.05, tck = c(0.7, 0),
x = list(alternating = FALSE),
y = list(alternating = FALSE)),
panel = function(x = x, y = y, subscripts = subscripts,
groups = immulong$vol) {
panel.grid(h = -1, v = -1)
panel.superpose(x, y, subscripts = subscripts, groups = groups,
type = c("p", "b"), col = 1, lwd = 2,
pch = 18, cex = 1.1)
}))
install.packages("cairoDevice", "gWidgetsRGtk2", "RGtk2", "gWidgets", "playwith")
library(playwith)
library(lattice)
library(playwith)
playwith(xyplot(lympho~totime|group, data = immulong, layout = c(3, 1),
groups = vol, subscripts = group,
par.strip.text = list(cex = 1.1, font = 2),
main = attr(immulong$lympho, "label"),
xlab = list("Months from first visit", font = 4),
ylab = list(attr(immulong$lympho, "units"), font = 4),
scales = list(font = 2, cex = 1.05, tck = c(0.7, 0),
x = list(alternating = FALSE),
y = list(alternating = FALSE)),
panel = function(x = x, y = y, subscripts = subscripts,
groups = immulong$vol) {
panel.grid(h = -1, v = -1)
panel.superpose(x, y, subscripts = subscripts, groups = groups,
type = c("p", "b"), col = 1, lwd = 2,
pch = 18, cex = 1.1)
}))
load("Immunology.RData")
install.packages("plotrix")
install.packages("plotrix")
library(plotrix)
library(plotrix)
example(twoord.plot)
